{"version":3,"sources":["structure-1.js"],"names":[],"mappings":"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","file":"structure-1-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************\n * ES6 Set 基本 *\n ****************/\n\n/**\n * ES6 提供了新的数据结构 Set\n * 它类似于数组\n * 但是成员的值都是唯一的\n * 没有重复的值\n */\n\n(() => {\n    var set = new Set();\n    // 添加重复值无效\n    [2, 3, 3].map(v => set.add(v));\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[value] = \", [...set], '\\n');\n})();\n\n/**\n * 数组作为参数\n */\n(() => {\n    var set1 = new Set([1, 2, 3, 4]);\n    for (let value of set1) {\n        console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[value] = \", value);\n    }\n    console.log('');\n\n    var set2 = new Set([2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]);\n    console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[set2.size] = \", set2.size, '\\n');\n\n    function getArray() {\n        let array = [2, 3, 3]\n        return [...array];\n    }\n\n    var set3 = new Set(getArray());\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[set3] = \", set3, '\\n');\n\n    var set4 = new Set();\n    getArray().forEach(v => set4.add(v));\n    console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[set4] = \", set4, '\\n');\n})();\n\n\n/**\n * 使用技巧：\n *\n * 利用 Set\n * 去除数组中的重复值\n * 然后得到数组\n */\n\n(() => {\n    let array = [2, 3, 3, 3, 3, 3, 3];\n    console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[...new Set(array)] = \", [...new Set(array)], '\\n');\n})();\n\n/**\n * Set 加入值\n * 不会发生类型转换\n *\n * 2 和 \"2\" 是两个不同的值\n * Set 它们是不同的\n * 使用的算法叫做 Same-value equality\n *\n * 类似于精确相等运算符（===）\n * 主要的区别是 NaN 等于自身，而精确相等运算符认为 NaN 不等于自身\n */\n(() => {\n    let set = new Set();\n    set.add(NaN);\n    set.add(NaN);\n    console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[set] = \", set);\n    set.clear();\n\n    set.add(2);\n    set.add(\"2\");\n    console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[set] = \", set, '\\n');\n    set.clear();\n})();\n\n/**\n * 空对象是不相等的\n */\n(() => {\n    let set = new Set();\n    set.add({}).add({}).add({}).add({}).add({}).add({});\n    console.log(\"[structure]\\t\\t[test-\" + 7 + \"]\\t\\t[set] = \", set);\n})();"]}