{"version":3,"sources":["structure-2.js"],"names":[],"mappings":";;;;AAAA;;;;AAIA;;;;AAIA;;;;;;;;;;;;AAYA,CAAC,YAAM;AACH,QAAI,MAAM,IAAI,GAAJ,EAAV;AACA,QAAI,GAAJ,CAAQ,CAAR,EAAW,GAAX,CAAe,CAAf,EAAkB,GAAlB,CAAsB,CAAtB;;AAEA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,eAA1C,EAA2D,GAA3D;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,oBAA1C,EAAgE,IAAI,IAApE;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,sBAA1C,EAAkE,IAAI,GAAJ,CAAQ,CAAR,CAAlE;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,sBAA1C,EAAkE,IAAI,GAAJ,CAAQ,CAAR,CAAlE;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,sBAA1C,EAAkE,IAAI,GAAJ,CAAQ,CAAR,CAAlE;AACA,QAAI,MAAJ,CAAW,CAAX;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,eAA1C,EAA2D,GAA3D,EAAgE,IAAhE;AACH,CAXD;;AAcA;;;AAGA,CAAC,YAAM;AACH,QAAI,SAAS;AACT,gBAAQ,SADC;AAET,gBAAQ;AAFC,KAAb;AAIA,QAAI,CAAC,OAAO,MAAP,CAAL,EAAqB;AACjB,gBAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,wBAA1C;AACH;;AAED,QAAI,MAAM,IAAI,GAAJ,EAAV;AACA,QAAI,GAAJ,CAAQ,SAAR;AACA,QAAI,GAAJ,CAAQ,wBAAR;AACA,QAAI,CAAC,IAAI,GAAJ,CAAQ,MAAR,CAAL,EAAsB;AAClB,gBAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,yBAA1C,EAAqE,IAArE;AACH;AACJ,CAfD;;AAkBA;;;AAGA,CAAC,YAAM;AACH,QAAI,MAAM,IAAI,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,CAAV;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,2BAA1C,EAAuE,MAAM,IAAN,CAAW,GAAX,CAAvE,EAAwF,IAAxF;AACH,CAHD;;AAMA;;;AAGA,CAAC,YAAM;AACH,aAAS,MAAT,CAAgB,KAAhB,EAAuB;AACnB,eAAO,MAAM,IAAN,CAAW,IAAI,GAAJ,CAAQ,KAAR,CAAX,CAAP;AACH;;AAED,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,2DAA1C,EAAuG,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,CAAP,CAAvG;AACA,YAAQ,GAAR,CAAY,0BAA0B,CAA1B,GAA8B,+DAA1C,+BAA+G,IAAI,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,CAAR,CAA/G;AACH,CAPD","file":"structure-2-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/**********************\n * ES6 Set 属性和方法 *\n **********************/\n\n/**\n * Set.prototype.constructor：构造函数，默认就是 Set 函数\n * Set.prototype.size：返回 Set 实例的成员总数\n *\n * Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）\n *\n * add(value)：添加某个值，返回 Set 结构本身\n * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功\n * has(value)：返回一个布尔值，表示该值是否为 Set 的成员\n * clear()：清除所有成员，没有返回值\n */\n\n(() => {\n    let set = new Set();\n    set.add(2).add(3).add(3);\n\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set] = \", set);\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set.size] = \", set.size);\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set.has(2)] = \", set.has(2));\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set.has(3)] = \", set.has(3));\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set.has(1)] = \", set.has(1));\n    set.delete(2);\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[set] = \", set, '\\n');\n})();\n\n\n/**\n * 与对象的区别\n */\n(() => {\n    var object = {\n        'name': 'CaMnter',\n        'sign': 'Save you from anything'\n    };\n    if (!object['save']) {\n        console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[!object['save']]\");\n    }\n\n    let set = new Set();\n    set.add('CaMnter');\n    set.add('Save you from anything');\n    if (!set.has('save')) {\n        console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[!set.has('save')]\", '\\n');\n    }\n})();\n\n\n/**\n * 转换为数组\n */\n(() => {\n    let set = new Set([2, 3, 3]);\n    console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.from(set)] = \", Array.from(set), '\\n');\n})();\n\n\n/**\n * 去除数组重复\n */\n(() => {\n    function dedupe(array) {\n        return Array.from(new Set(array));\n    }\n\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[dedupe([2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])] = \", dedupe([2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]));\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[...new Set([2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])] = \", [...new Set([2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])]);\n})();"]}