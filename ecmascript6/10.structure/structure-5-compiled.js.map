{"version":3,"sources":["structure-5.js"],"names":[],"mappings":"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","file":"structure-5-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n\n/***********\n * ES6 Map *\n ***********/\n\n/**\n * 传统 JS 对象\n * 虽然是键值对的集合\n * 但是 key 只能是 string\n * 如果强塞非 string 的话，会调用 toString 方法转为 String\n * 取值的时候也是\n *\n * 字符串 - 值 对\n */\nlet objectKey = {save: 'Save you from anything'};\n(() => {\n    let lowLevelMap = {};\n    lowLevelMap[objectKey] = 'objectValue';\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[lowLevelMap] = \", lowLevelMap);\n    console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[lowLevelMap[objectKey.toString()]] = \", lowLevelMap[objectKey.toString()], '\\n');\n})();\n\n/**\n * ES6 Map 的 Map 就可以实现\n * 值 - 值 对\n */\n(() => {\n    let map = new Map();\n    map.set(objectKey, 'ObjectValue');\n    console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[map] = \", map);\n    console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[map.has(objectKey)] = \", map.has(objectKey));\n    console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[map.get(objectKey)] = \", map.get(objectKey), '\\n');\n})();\n\n/**\n * ES6 Map 可以接收数组\n * 数组的成员是 键值对数组\n */\nlet keyValueArray = [['name', 'CaMnter'], ['save', 'Save you from anything']];\n(() => {\n    var map = new Map(keyValueArray);\n    console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[map] = \", map);\n    console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[map] = \", map.get(keyValueArray[0][0]));\n    // 不是键值对的数组\n    let array = ['CaMnter', 'Save you from anything'];\n    try {\n        var map = new Map(array);\n        console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[map] = \", map);\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[e] = \", e, '\\n');\n    }\n})();\n\n/**\n * ES6 Map 可以接受数组的 原理\n */\n(() => {\n    let map = new Map();\n    // 原理\n    keyValueArray.map((k, v) => map.set(k, v));\n})();\n\n/**\n * 'true' 和 true\n * 作为 key 的话是不同的\n */\n(() => {\n    let array = [[true, 'Boolean key'], ['true', 'String key']];\n    let map = new Map(array);\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[map] = \", map);\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[map.get(true)] = \", map.get(true));\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[map.get('true')] = \", map.get('true'), '\\n');\n})();\n\n/**\n * 同 key 覆盖\n */\n(() => {\n    let map = new Map();\n    map.set(true, 233);\n    map.set(true, 2233);\n    console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[map.get(true)] = \", map.get(true), '\\n');\n})();\n\n/**\n * 不存在的 key 返回时 undefined\n */\n(() => {\n    console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[new Map().get(true)] = \", new Map().get(true), '\\n');\n})();\n\n/**\n * 对象作为 key 的话，必须引用相同才算作同一个 key，结构是否一样不考虑在内\n *\n * Map 的键实际上是跟内存地址绑定的\n * 只要内存地址不一样，就视为两个键。\n * 这就解决了同名属性碰撞（clash）的问题，\n * 扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名\n */\n(() => {\n    let o1 = {save: 'save'}, o2 = {save: 'save'};\n    let map = new Map();\n    map.set(o1, \"233\");\n    map.set(o2, \"2233\");\n    // 结构一样，但是存在两个。因为引用地址不一样\n    console.log(\"[structure]\\t\\t[test-\" + 7 + \"]\\t\\t[map] = \", map, '\\n');\n})();\n\n/**\n * key 的话\n * +0 和 -0 视为一样\n * NaN 都视为一样\n */\n(() => {\n    let map = new Map();\n    map.set(+0, 233);\n    map.set(-0, 2233);\n    // 只有一个 key value\n    console.log(\"[structure]\\t\\t[test-\" + 8 + \"]\\t\\t[map] = \", map);\n    map.clear();\n    map.set(NaN, 233);\n    map.set(NaN, 2333);\n    // 也只有一个 key value\n    console.log(\"[structure]\\t\\t[test-\" + 8 + \"]\\t\\t[map] = \", map, '\\n');\n})();\n\n"]}