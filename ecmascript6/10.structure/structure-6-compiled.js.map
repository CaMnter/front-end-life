{"version":3,"sources":["structure-6.js"],"names":[],"mappings":"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","file":"structure-6-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/********************\n * ES6 Map 遍历方法 *\n ********************/\n\n/**\n * keys()\n */\nlet data = [['name', 'CaMnter'], ['save', 'Save you from anything']];\nlet map = new Map(data);\n(() => {\n    let keys = map.keys();\n    // MapIterator { 'name', 'save' }\n    console.log(\"[structure]    [test-\" + 1 + \"]    [keys] = \", keys);\n    for (let key of keys) {\n        console.log(\"[structure]    [test-\" + 1 + \"]    [key] = \", key);\n    }\n    console.log('');\n})();\n\n/**\n * values()\n */\n(() => {\n    let values = map.values();\n    // MapIterator { 'CaMnter', 'Save you from anything' }\n    console.log(\"[structure]    [test-\" + 2 + \"]    [values] = \", values);\n    for (let value of map.values()) {\n        console.log(\"[structure]    [test-\" + 2 + \"]    [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * entries()\n */\n(() => {\n    // MapIterator { [ 'name', 'CaMnter' ], [ 'save', 'Save you from anything' ] }\n    console.log(\"[structure]    [test-\" + 3 + \"]    [entries] = \", map.entries());\n    for (let entry of map.entries()) {\n        console.log(\"[structure]    [test-\" + 3 + \"]    [entry] = \", entry);\n    }\n    for (let [k, v] of map.entries()) {\n        console.log(\"[structure]    [test-\" + 4 + \"]    [k, v] = \", [k, v]);\n    }\n\n    // 直接写 map 等同于 map.entries()\n    for (let [key, value] of map) {\n        console.log(\"[structure]    [test-\" + 5 + \"]    [key, value] = \", [key, value]);\n    }\n    console.log('');\n})();\n\n/**\n * map[Symbol.iterator] === map.entries\n */\n(() => {\n    console.log(\"[structure]    [test-\" + 6 + \"]    [map[Symbol.iterator] === map.entries] = \", map[Symbol.iterator] === map.entries, '\\n');\n})();\n\n/**\n * Map >> Array\n * 最快速的方法就是 ... 扩展运算符\n *\n * 甚至，直接 ...map 都可以\n */\n(() => {\n    console.log(\"[structure]    [test-\" + 7 + \"]    [...map.keys()] = \", [...map.keys()]);\n    console.log(\"[structure]    [test-\" + 7 + \"]    [...map.values()] = \", [...map.values()]);\n    console.log(\"[structure]    [test-\" + 7 + \"]    [...map.entries()] = \", [...map.entries()]);\n    // 直接 [...map]\n    console.log(\"[structure]    [test-\" + 7 + \"]    [...map] = \", [...map], '\\n');\n})();\n\n/**\n * Map 没有 filter 和 map 方法\n * 但是结合 [...map] 转为数组后，可以数显 Map 的 filter 和 map 方法\n */\n(() => {\n    let map = new Map([[1, 'A'], [2, 'B'], [3, 'C'], [4, 'D']]);\n    console.log(\"[structure]    [test-\" + 8 + \"]    [map] = \", map);\n    let filterMap = new Map([...map].filter(([k, v]) => k <= 2));\n    console.log(\"[structure]    [test-\" + 8 + \"]    [filterMap] = \", filterMap);\n    let mapMap = new Map([...map].map(([k, v]) => [k, \"array_map_\" + v]));\n    console.log(\"[structure]    [test-\" + 8 + \"]    [mapMap] = \", mapMap);\n})();\n\n/**\n * Map foreach\n */\n(() => {\n    map.forEach((value, key, map) => console.log(\"[structure]    [test-\" + 9 + \"]    Key: %s, Value: %s\", key, value));\n    console.log('');\n})();\n\n/**\n * Map foreach binding this\n */\n(() => {\n    var reporter = {\n        report: function (key, value) {\n            console.log(\"[structure]    [test-\" + 10 + \"]    Key: %s, Value: %s\", key, value);\n        }\n    };\n\n    map.forEach(function (value, key, map) {\n        // this == reporter，绑定了\n        this.report(key, value);\n    }, reporter);\n})();"]}