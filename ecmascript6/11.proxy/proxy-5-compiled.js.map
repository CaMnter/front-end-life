{"version":3,"sources":["proxy-5.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;AAKA;;;AAGA,CAAC,YAAM;AACH,QAAI,SAAS,EAAC,OAAO,MAAR,EAAgB,MAAM,MAAtB,EAAb;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,WAD0B,eACtB,MADsB,EACd,WADc,EACF;AACpB,gBAAI,YAAY,CAAZ,MAAmB,GAAvB,EACI,OAAO,KAAP;AACJ,mBAAO,QAAQ,GAAR,CAAY,MAAZ,EAAoB,WAApB,CAAP;AACH;AALyB,KAAlB,CAAZ;AAOA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,eAApC,EAAqD,KAArD;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,yBAApC,EAA+D,UAAU,KAAzE;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,0BAApC,EAAgE,WAAW,KAA3E,EAAkF,IAAlF;AACH,CAZD;;AAcA;;;AAGA,CAAC,YAAM;AACH,QAAI,SAAS,EAAC,MAAM,MAAP,EAAb;AACA;AACA,WAAO,iBAAP,CAAyB,MAAzB;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,WAD0B,eACtB,MADsB,EACd,WADc,EACF;AACpB,mBAAO,KAAP;AACH;AAHyB,KAAlB,CAAZ;AAKA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,0BAApC,EAAgE,UAAU,MAA1E;AACA,QAAI;AACA,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,0BAApC,EAAgE,UAAU,KAA1E,EAAiF,IAAjF;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,WAApC,EAAiD,CAAjD,EAAoD,IAApD;AACH;AACJ,CAfD;;AAiBA;;;;;;AAMA;;;AAGA,CAAC,YAAM;AACH,QAAI,UAAU,EAAC,MAAM,MAAP,EAAd;AACA,QAAI,UAAU,EAAC,OAAO,OAAR,EAAd;;AAEA,QAAI,UAAU;AACV,WADU,eACN,MADM,EACE,WADF,EACc;AACpB,gBAAI,YAAY,CAAZ,MAAmB,GAAvB,EAA4B;AACxB,uBAAO,KAAP;AACH;AACD,mBAAO,QAAQ,GAAR,CAAY,MAAZ,EAAoB,WAApB,CAAP;AACH;AANS,KAAd;;AASA,QAAI,SAAS,IAAI,KAAJ,CAAU,OAAV,EAAmB,OAAnB,CAAb;AACA,QAAI,SAAS,IAAI,KAAJ,CAAU,OAAV,EAAmB,OAAnB,CAAb;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,4BAApC,EAAkE,UAAU,MAA5E;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,4BAApC,EAAkE,WAAW,MAA7E;;AAEA,SAAK,IAAI,WAAT,IAAwB,MAAxB,EAAgC;AAC5B,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,6BAApC,EAAmE,OAAO,WAAP,CAAnE;AACH;AACD;AACA;AACA,SAAK,IAAI,YAAT,IAAwB,MAAxB,EAAgC;AAC5B,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,6BAApC,EAAmE,OAAO,YAAP,CAAnE;AACH;AACJ,CA1BD","file":"proxy-5-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*****************************\n * ES6 Proxy 代理 has 的场景 *\n *****************************/\n\n/**\n * has 方法用来拦截 hasProperty 操作，即判断对象是否具有某个属性时，这个方法会生效\n * 典型的操作就是 in 运算符\n */\n\n/**\n * 隐藏 _Xxx 属性\n */\n(() => {\n    let target = {_save: 'save', save: 'save'};\n    let proxy = new Proxy(target, {\n        has(target, propertyKey){\n            if (propertyKey[0] === '_')\n                return false;\n            return Reflect.has(target, propertyKey);\n        }\n    });\n    console.log(\"[proxy]  [test-\" + 1 + \"]  [proxy] = \", proxy);\n    console.log(\"[proxy]  [test-\" + 1 + \"]  ['save' in proxy] = \", 'save' in proxy);\n    console.log(\"[proxy]  [test-\" + 1 + \"]  ['_save' in proxy] = \", '_save' in proxy, '\\n');\n})();\n\n/**\n * 对象 不可配置 和 禁止扩展\n */\n(() => {\n    let object = {save: 'save'};\n    // 设置对象不可扩展\n    Object.preventExtensions(object);\n    let proxy = new Proxy(object, {\n        has(target, propertyKey){\n            return false;\n        }\n    });\n    console.log(\"[proxy]  [test-\" + 2 + \"]  ['save' in object] = \", 'save' in object);\n    try {\n        console.log(\"[proxy]  [test-\" + 2 + \"]  ['save' in object] = \", 'save' in proxy, '\\n');\n    } catch (e) {\n        console.log(\"[proxy]  [test-\" + 2 + \"]  [e] = \", e, '\\n');\n    }\n})();\n\n/**\n * has 方法拦截的是 HasProperty 操作，而不是 HasOwnProperty 操作\n *\n * has 方法 不判断一个属性是对象自身的属性，还是继承的属性\n */\n\n/**\n * 注意：has 拦截对 for...in 是没效果的\n */\n(() => {\n    let objectA = {save: 'save'};\n    let objectB = {_save: '_save'};\n\n    let handler = {\n        has(target, propertyKey){\n            if (propertyKey[0] === '_') {\n                return false;\n            }\n            return Reflect.has(target, propertyKey);\n        }\n    }\n\n    let proxyA = new Proxy(objectA, handler);\n    let proxyB = new Proxy(objectB, handler);\n    console.log(\"[proxy]  [test-\" + 3 + \"]  ['save' in inProxyA] = \", 'save' in proxyA);\n    console.log(\"[proxy]  [test-\" + 3 + \"]  ['_save' in objectB] = \", '_save' in proxyB);\n\n    for (let propertyKey in proxyA) {\n        console.log(\"[proxy]  [test-\" + 3 + \"]  [proxyA[propertyKey]] = \", proxyA[propertyKey]);\n    }\n    // 如果拦截的话，就不会输出\n    // 但是实际上输出了\n    for (let propertyKey in proxyB) {\n        console.log(\"[proxy]  [test-\" + 3 + \"]  [proxyB[propertyKey]] = \", proxyB[propertyKey]);\n    }\n})();"]}