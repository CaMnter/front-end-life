{"version":3,"sources":["iterator-2.js"],"names":[],"mappings":"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","file":"iterator-2-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*******************************\n * 数据结构的默认 Iterator 接口 *\n *******************************/\n\n/**\n * ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性\n * 一个数据结构只要具有 Symbol.iterator 属性，就可以认为是 \"可遍历的\"\n *\n * Symbol.iterator 属性本身是一个函数，就是当前数据结构默认的遍历器生成函数\n * 执行这个函数，就会返回一个遍历器\n *\n * 属性名 Symbol.iterator，它是一个表达式，返回 Symbol 对象的 iterator 属性\n * 这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内\n */\n\n\n/**\n * 具有 Symbol.iterator 属性\n * 执行这个属性，会返回一个遍历器对象\n */\n(() => {\n    let target = {\n        [Symbol.iterator]: function () {\n            return {\n                next: function () {\n                    return {\n                        value: 2233,\n                        done: true\n                    };\n                }\n            };\n        }\n    };\n})();\n\n/**\n * 原生具备 Iterator 接口\n */\n(() => {\n    let array = ['save', 'you', 'from', 'anything'];\n    let iterator = array[Symbol.iterator]();\n    for (let i = 0; i < array.length; i++) {\n        console.log(\"[iterator]  [test-\" + 1 + \"]  [iterator.next()] = \", iterator.next());\n    }\n    console.log('');\n})();\n\n\n/**\n * 除开 数组、Set 和 Map 以外\n * 其他数据结构（主要是对象）的 Iterator 接口，都需要自己在 Symbol.iterator 属性上面部署\n * 这样才会被 for...of 循环遍历\n */\n\n/**\n * 实例一：\n * 让对象用上 for...of\n */\n(() => {\n    class RangeInterator {\n        constructor(start, stop) {\n            this.value = start;\n            this.stop = stop;\n        }\n\n        [Symbol.iterator]() {\n            return this;\n        }\n\n        // 返回对象的格式 {value: ???, done: ???}\n        next() {\n            let value = this.value;\n            if (value < this.stop) {\n                this.value++;\n                return {value: value, done: false};\n            } else {\n                return {value: undefined, done: true};\n            }\n        }\n    }\n\n    function getRangeInterator(start, stop) {\n        return new RangeInterator(start, stop);\n    }\n\n    for (let save of getRangeInterator(1, 7)) {\n        console.log(\"[iterator]  [test-\" + 2 + \"]  [save] = \", save);\n    }\n\n    for (let value of getRangeInterator(1, 7)) {\n        console.log(\"[iterator]  [test-\" + 2 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * 实例二：\n * 实现 指针 结构\n */\n(() => {\n    function Pointer(value) {\n        this.value = value;\n        this.next = null;\n    }\n\n    Pointer.prototype[Symbol.iterator] = function () {\n        let iterator = {\n            next: next\n        };\n        let current = this;\n\n        function next() {\n            if (current) {\n                let value = current.value;\n                current = current.next;\n                return {\n                    value: value,\n                    done: false\n                };\n            } else {\n                return {\n                    done: true\n                };\n            }\n        }\n\n        return iterator;\n    }\n\n    let save = new Pointer('save');\n    let you = new Pointer('you');\n    let from = new Pointer('from');\n    let anything = new Pointer('anything');\n\n    save.next = you;\n    you.next = from;\n    from.next = anything;\n\n    for (let value of save) {\n        console.log(\"[iterator]  [test-\" + 3 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * 实例三：\n * 为对象添加 Iterator 接口\n */\n(() => {\n    let target = {\n        data: [],\n        [Symbol.iterator](){\n            const self = this;\n            let index = 0;\n\n            function next() {\n                if (index < self.data.length) {\n                    return {\n                        value: self.data[index++],\n                        done: false\n                    }\n                } else {\n                    return {\n                        value: undefined,\n                        done: true\n                    }\n                }\n            };\n\n            let iterator = {\n                next: next\n            };\n            return iterator;\n        }\n    }\n    let array = ['save', 'you', 'from', 'anything'];\n    target.data.push(...array);\n    console.log(\"[iterator]  [test-\" + 4 + \"]  [target] = \", target);\n    for (let targetValue of target) {\n        console.log(\"[iterator]  [test-\" + 4 + \"]  [targetValue] = \", targetValue);\n    }\n    console.log('');\n})();\n\n/**\n * 实例四：\n * 引用现成的 Iterator 接口\n */\n(() => {\n    let target = {\n        0: 'save',\n        1: 'you',\n        2: 'from',\n        3: 'anything',\n        length: 7,\n        [Symbol.iterator]: Array.prototype[Symbol.iterator]\n    };\n    for (let value of target) {\n        console.log(\"[iterator]  [test-\" + 5 + \"]  [value] = \", value);\n    }\n    console.log('');\n    // 必须对应数组的结构的 对象才可以，普通对象不可以\n    let erroTarget = {\n        save: 'save',\n        you: 'you',\n        from: 'from',\n        anything: 'anything',\n        length: 4,\n        [Symbol.iterator]: Array.prototype[Symbol.iterator]\n    };\n    for (let value of erroTarget) {\n        console.log(\"[iterator]  [test-\" + 6 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * Symbol.iterator 返回的必须是 遍历器对象 Iterator\n */\n(() => {\n    let targetA = {};\n    targetA[Symbol.iterator] = () => 2233;\n    try {\n        for (let value of targetA) {\n        }\n    } catch (e) {\n        console.log(\"[iterator]  [test-\" + 7 + \"]  [e] = \", e);\n    }\n\n    let targetB = {};\n    targetB[Symbol.iterator] = function () {\n        function next() {\n            return {\n                value: undefined,\n                done: true\n            }\n        };\n        let iterator = {\n            next: next\n        };\n        return iterator;\n    };\n    for (let value of targetB) {\n    }\n})();"]}