{"version":3,"sources":["iterator-4.js"],"names":[],"mappings":"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","file":"iterator-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/**********************************\n * Iterator 接口与 Generator 函数 *\n *********************************/\n\n(() => {\n    let generator = {};\n    // Symbol.iterator 可以直接写 generator 函数\n    generator[Symbol.iterator] = function *() {\n        yield 2;\n        yield 3;\n        yield 3;\n    };\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [...generator] = \", [...generator]);\n\n    // 简洁写法\n    let smartGenerator = {\n        *[Symbol.iterator](){\n            yield 'save';\n            yield 'you';\n            yield 'from';\n            yield 'anything';\n        }\n    };\n    for (let value of smartGenerator) {\n        console.log(\"[iterator]  [test-\" + 1 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n\n/*********************************\n * 遍历器对象的 return()，throw() *\n *********************************/\n\n/**\n * Iterator 对象除了 next 方法外还有 return 和 throw 方法\n *\n * next 必须\n * return 非必须\n * throw 非必须\n */\n\n/**\n * return 的场合\n *\n * 如果 for...of 循环提前退出（ 出错，break 或 continue 等 ）\n * 就会调用 return\n *\n * 如果一个对象在完成遍历前，需要清理或释放资源，就可以部署 return 方法\n *\n * 注意，return 方法必须返回一个对象\n */\n(() => {\n    function readLinesSync(file) {\n        return {\n            next() {\n                if (file.isAtEndOfFile()) {\n                    file.close();\n                    return {done: true};\n                }\n            },\n            return() {\n                file.close();\n                return {done: true};\n            },\n        };\n    }\n})();\n\n\n/********\n * 数组 *\n ********/\n\n/**\n * 实例一：\n * 对象上用 数组的 Iterator 和 数据\n */\n(() => {\n    let source = ['save', 'you', 'from', 'anything'];\n    let target = {};\n    target[Symbol.iterator] = source[Symbol.iterator].bind(source);\n    for (let value of target) {\n        console.log(\"[iterator]  [test-\" + 2 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * for...in\n * for...of\n */\n(() => {\n    let target = ['save', 'you', 'from', 'anything'];\n    // index\n    for (let index in target) {\n        console.log(\"[iterator]  [test-\" + 3 + \"]  [index] = \", index);\n    }\n    // value\n    for (let value of target) {\n        console.log(\"[iterator]  [test-\" + 3 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * for...of 循环调用遍历器接口\n * 数组的遍历器接口 只返回 索引是数字的属性\n */\n(() => {\n    let target = ['save', 'you', 'from', 'anything'];\n    target.forever = 'forever';\n    console.log(\"[iterator]  [test-\" + 4 + \"]  [target] = \", target);\n    // forever 不是数组 index\n    for (let index in target) {\n        console.log(\"[iterator]  [test-\" + 4 + \"]  [index] = \", index);\n    }\n    // for...of 不返回\n    for (let value of target) {\n        console.log(\"[iterator]  [test-\" + 4 + \"]  [value] = \", value);\n    }\n})();"]}