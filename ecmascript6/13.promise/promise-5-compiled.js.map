{"version":3,"sources":["promise-5.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;;;AAQA,CAAC,YAAM;AACH,QAAI,SAAS,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAb;AACA;AACA,YAAQ,IAAR,CAAa,OAAO,GAAP,CAAW,mBAAW;AAC/B,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,gBAAI,OAAJ,EAAa;AACT,wBAAQ,MAAR;AACH,aAFD,MAEO;AACH,uBAAO,IAAI,KAAJ,CAAU,WAAV,CAAP;AACH;AACJ,SANM,CAAP;AAOH,KARY,CAAb,EAQI,IARJ,CAQS,iBAAS;AACd,gBAAQ,GAAR,CAAY,sBAAsB,CAAtB,GAA0B,gCAAtC,EAAwE,KAAxE,EAA+E,IAA/E;AACH,KAVD,EAUG,KAVH,CAUS,iBAAS;AACd,gBAAQ,GAAR,CAAY,sBAAsB,CAAtB,GAA0B,iCAAtC,EAAyE,KAAzE,EAAgF,IAAhF;AACH,KAZD;AAaH,CAhBD;;AAkBA;;;AAGA,CAAC,YAAM;;AAEH,aAAS,WAAT,GAAuB;AACnB,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC;AACA,uBAAW;AAAA,uBAAM,SAAN;AAAA,aAAX,EAA4B,IAA5B;AACH,SAHM,CAAP;AAIH;;AAED,YAAQ,IAAR,CACI,CACI,aADJ,EAEI,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC7B;AACA,mBAAW;AAAA,mBAAM,OAAO,IAAI,KAAJ,CAAU,OAAV,CAAP,CAAN;AAAA,SAAX,EAA6C,IAA7C;AACH,KAHD,CAFJ,CADJ,EAQE,IARF,CAQO,iBAAS;AACZ,gBAAQ,GAAR,CAAY,sBAAsB,CAAtB,GAA0B,gCAAtC,EAAwE,KAAxE,EAA+E,IAA/E;AACH,KAVD,EAUG,KAVH,CAUS,iBAAS;AACd,gBAAQ,GAAR,CAAY,sBAAsB,CAAtB,GAA0B,iCAAtC,EAAyE,KAAzE,EAAgF,IAAhF;AACH,KAZD;AAcH,CAvBD","file":"promise-5-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/******************\n * Promise.race() *\n ******************/\n\n/**\n * Promise.race 方法也是用于将多个 Promise 实例\n * 包装成一个新的 Promise 实例\n *\n * 与 Promise.all 的区别在于：只要 Promise 数组中，有一个 Promise 最先改变状态\n * 那么 Promise.race 返回的 Promise 实例\n */\n\n(() => {\n    let arrayA = [true, false, false];\n    // 依然会走 then\n    Promise.race(arrayA.map(element => {\n        return new Promise((resolve, reject) => {\n            if (element) {\n                resolve('Save');\n            } else {\n                reject(new Error('异空间错误 404'));\n            }\n        });\n    })).then(value => {\n        console.log(\"[promise]  [test-\" + 1 + \"]  [promise # then # value] = \", value, '\\n');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 1 + \"]  [promise # catch # error] = \", error, '\\n');\n    });\n})();\n\n/**\n * 实例：网络请求超时\n */\n(() => {\n\n    function getResponse() {\n        return new Promise((resolve, reject) => {\n            // 假如网络请求需要 2000ms 才返回\n            setTimeout(() => resolve(), 2000);\n        });\n    };\n\n    Promise.race(\n        [\n            getResponse(),\n            new Promise((resolve, reject) => {\n                // 1677ms 就超时\n                setTimeout(() => reject(new Error('异空间超时')), 1677);\n            })\n        ]\n    ).then(value => {\n        console.log(\"[promise]  [test-\" + 2 + \"]  [promise # then # value] = \", value, '\\n');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 2 + \"]  [promise # catch # error] = \", error, '\\n');\n    });\n\n})();"]}