{"version":3,"sources":["generator-3.js"],"names":[],"mappings":"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","file":"generator-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/******************\n * Generator next *\n ******************/\n\nrequire(\"babel-polyfill\");\n\n/**\n * yield 语句本身没有 具体返回值，一直返回 undefined\n * next 方法可以加一个参数，作为上一次 yield 的返回值\n */\n\n/**\n * 实例：初始化遍历\n */\n(() => {\n    function* resetTraverse() {\n        for (var i = 1; true; i++) {\n            let reset = yield i;\n            if (reset) {\n                i = 0;\n            }\n        }\n    }\n\n    let generator = resetTraverse();\n    for (let i = 0; i < 2; i++) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next());\n    }\n    console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next(true)] = \", generator.next(true));\n    for (let i = 0; i < 2; i++) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next());\n    }\n    console.log('');\n})();\n\n/**\n * 复杂例子\n */\n(() => {\n    function* func(v) {\n        let x = 2 * (yield (v + 1));\n        let y = yield (x / 3);\n        return (v + x + y);\n    }\n\n    let generatorA = func(2);\n    // 调用前暂停到 yield (v + 1)，调用后 返回 v + 1，然后暂停到下个 yield (x / 3)\n    // 得到 3\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n    // 调用前暂停到 yield (x / 3)，调用后 返回 x / 3，然后暂停到 return\n    // x = 2 * (yield (v + 1))，yield (v + 1) = undefined\n    // x = 2 * undefined = NaN\n    // x / 3 = NaN\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n    // 调用前暂停到 return，调用后 返回 v + x + y，return 调用后结束\n    // x = 2 * (yield (v + 1))，yield (v + 1) = undefined\n    // x = 2 * undefined = NaN\n    // y = yield (x / 3)，yield (x / 3) = undefined\n    // y = undefined\n    // v + x + y = 2 + NaN + undefined = NaN\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n\n    let generatorB = func(2);\n    // 调用前暂停到 yield (v + 1)，调用后 返回 v + 1，然后暂停到下个 yield (x / 3)\n    // 得到 3\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next());\n    // 调用前暂停到 yield (x / 3)，调用后 返回 x / 3，然后暂停到 return\n    // x = 2 * (yield (v + 1))，yield (v + 1) = 3\n    // x = 2 * 3 = 6\n    // x / 3 = 2\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next(3));\n    // 调用前暂停到 return，调用后 返回 v + x + y，return 调用后结束\n    // x = 2 * (yield (v + 1))，yield (v + 1) = 3\n    // x = 2 * 3 = 6\n    // y = yield (x / 3)，yield (x / 3) = 3\n    // y = 3\n    // v + x + y = 2 + 6 + 3 = 11\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next(3), '\\n');\n})();\n\n/**\n * 第一次 next 的参数值是失效的\n *\n * 以上面的为例：yield (v + 1)，调用后 返回 v + 1，完全不涉及到 yield (v + 1) 的值，只关心了 yield\n * 后面的 v + 1 的值\n *\n * 如果想要第一调用 next 方法时，参数值生效\n * 需要在 Generator 包一层\n *\n * 实质上就是完成了：\n * 创建 Generator 方法 + 手动调用一次 next\n * 然后这个参数作为 创建 Generator 方法 时的初始值\n */\n(() => {\n    function wrapperGenerator(generatorFunction) {\n        return function (...args) {\n            let generator = generatorFunction(...args);\n            generator.next();\n            return generator;\n        };\n    }\n\n    const wrapped = wrapperGenerator(function*() {\n        console.log(\"[generator]  [test-\" + 4 + \"]  [yield] = \", yield);\n        return \"done\";\n    });\n\n    let generator = wrapped();\n    generator.next('Save');\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generator.next()] = \", generator.next(), '\\n');\n})();\n\n/**\n * 向 Generator 输入值的例子\n */\n(() => {\n    function * generatorFunction() {\n        console.log(\"[generator]  [test-\" + 5 + \"]  [start]\");\n        console.log(\"[generator]  [test-\" + 5 + \"]  [ 1. yield ] = \", yield);\n        console.log(\"[generator]  [test-\" + 5 + \"]  [ 2. yield ] = \", yield);\n        console.log(\"[generator]  [test-\" + 5 + \"]  [ 3. yield ] = \", yield);\n        console.log(\"[generator]  [test-\" + 5 + \"]  [ 4. yield ] = \", yield);\n    }\n\n    let generator = generatorFunction();\n    generator.next();\n    let save = 'Save';\n    for (let char of save) {\n        generator.next(char);\n    }\n})();"]}