{"version":3,"sources":["generator-3.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;AAKA;;;AAGA,CAAC,YAAM;AAAA,mBACO,aADP;;AACH,aAAU,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACa,yBADb,GACiB,CADjB;;AAAA;AAAA,6BACoB,IADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAE0B,CAF1B;;AAAA;AAEY,6BAFZ;;AAGQ,4BAAI,KAAJ,EAAW;AACP,gCAAI,CAAJ;AACH;;AALT;AAC0B,2BAD1B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,QAAI,YAAY,eAAhB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AACxB,gBAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,0BAAxC,EAAoE,UAAU,IAAV,EAApE;AACH;AACD,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,8BAAxC,EAAwE,UAAU,IAAV,CAAe,IAAf,CAAxE;AACA,SAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,CAApB,EAAuB,IAAvB,EAA4B;AACxB,gBAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,0BAAxC,EAAoE,UAAU,IAAV,EAApE;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAnBD;;AAqBA;;;AAGA,CAAC,YAAM;AAAA,oBACO,IADP;;AACH,aAAU,IAAV,CAAe,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACwB,IAAI,CAD5B;;AAAA;AAAA;AACQ,yBADR,GACY,CADZ;AAAA;AAAA,+BAEmB,IAAI,CAFvB;;AAAA;AAEQ,yBAFR;AAAA,0DAGY,IAAI,CAAJ,GAAQ,CAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,QAAI,aAAa,KAAK,CAAL,CAAjB;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,EAArE;AACA;AACA;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,EAArE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,EAArE;;AAEA,QAAI,aAAa,KAAK,CAAL,CAAjB;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,EAArE;AACA;AACA;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,CAAgB,CAAhB,CAArE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAQ,GAAR,CAAY,wBAAwB,CAAxB,GAA4B,2BAAxC,EAAqE,WAAW,IAAX,CAAgB,CAAhB,CAArE;AACH,CAxCD","file":"generator-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/******************\n * Generator next *\n ******************/\n\n/**\n * yield 语句本身没有 具体返回值，一直返回 undefined\n * next 方法可以加一个参数，作为上一次 yield 的返回值\n */\n\n/**\n * 实例：初始化遍历\n */\n(() => {\n    function* resetTraverse() {\n        for (var i = 1; true; i++) {\n            let reset = yield i;\n            if (reset) {\n                i = 0;\n            }\n        }\n    }\n\n    let generator = resetTraverse();\n    for (let i = 0; i < 2; i++) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next());\n    }\n    console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next(true)] = \", generator.next(true));\n    for (let i = 0; i < 2; i++) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next());\n    }\n    console.log('');\n})();\n\n/**\n * 复杂例子\n */\n(() => {\n    function* func(v) {\n        let x = 2 * (yield (v + 1));\n        let y = yield (x / 3);\n        return (v + x + y);\n    }\n\n    let generatorA = func(2);\n    // 调用前暂停到 yield (v + 1)，调用后 返回 v + 1，然后暂停到下个 yield (x / 3)\n    // 得到 3\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n    // 调用前暂停到 yield (x / 3)，调用后 返回 x / 3，然后暂停到 return\n    // x = 2 * (yield (v + 1))，yield (v + 1) = undefined，\n    // x = 2 * undefined = NaN\n    // x / 3 = NaN\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n    // 调用前暂停到 return，调用后 返回 v + x + y，return 调用后结束\n    // x = 2 * (yield (v + 1))，yield (v + 1) = undefined，\n    // x = 2 * undefined = NaN\n    // y = yield (x / 3)，yield (x / 3) = undefined，\n    // y = undefined\n    // v + x + y = 2 + NaN + undefined = NaN\n    console.log(\"[generator]  [test-\" + 2 + \"]  [generatorA.next()] = \", generatorA.next());\n\n    let generatorB = func(2);\n    // 调用前暂停到 yield (v + 1)，调用后 返回 v + 1，然后暂停到下个 yield (x / 3)\n    // 得到 3\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next());\n    // 调用前暂停到 yield (x / 3)，调用后 返回 x / 3，然后暂停到 return\n    // x = 2 * (yield (v + 1))，yield (v + 1) = 3，\n    // x = 2 * 3 = 6\n    // x / 3 = 2\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next(3));\n    // 调用前暂停到 return，调用后 返回 v + x + y，return 调用后结束\n    // x = 2 * (yield (v + 1))，yield (v + 1) = 3，\n    // x = 2 * 3 = 6\n    // y = yield (x / 3)，yield (x / 3) = 3，\n    // y = 3\n    // v + x + y = 2 + 6 + 3 = 11\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generatorB.next()] = \", generatorB.next(3));\n})();"]}