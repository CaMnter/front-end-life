{"version":3,"sources":["generator-4.js"],"names":[],"mappings":"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","file":"generator-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*********************\n * Generator for..of *\n *********************/\n\n/**\n * Generator 是一个生成 Iterator 的方法\n * 然而 for...of 就需要 Iterator\n */\n(() => {\n    function* generator() {\n        yield 'Save';\n        yield 'you';\n        yield 'from';\n        yield 'anything';\n    }\n\n    for (let value of generator()) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * 斐波那契算法\n */\n(() => {\n    function* fibonacci() {\n        let [previous, current] = [0, 1];\n        for (; ;) {\n            [previous, current] = [current, previous + current];\n            yield current;\n        }\n    }\n\n    for (let total of fibonacci()) {\n        if (total > 1000) {\n            console.log('');\n            break;\n        }\n        console.log(\"[generator]  [test-\" + 2 + \"]  [total] = \", total);\n    }\n})();\n\n/**\n * 遍历对象：第一种写法\n */\n(() => {\n    let target = {\n        save: 'save',\n        you: 'you',\n        from: 'from',\n        anything: 'anything'\n    };\n    target[Symbol.iterator] = function*() {\n        const SYMBOL_TYPE = 'symbol';\n        let _this = target;\n        let handler = {\n            ownKeys(target){\n                // 过滤掉 Symbol.???\n                return Reflect.ownKeys(target).filter(key => typeof key !== SYMBOL_TYPE);\n            }\n        }\n        let proxy = new Proxy(_this, handler);\n        for (let key of  Object.keys(proxy)) {\n            yield [key, target[key]];\n        }\n    }\n    for (let [key, value] of target) {\n        console.log(\"[generator]  [test-\" + 3 + \"]  [key, value] = [\", key, \", \", value, \"]\");\n    }\n    console.log('');\n})();\n\n/**\n * 遍历对象：第二种写法\n */\n(() => {\n    let target = {\n        save: 'save',\n        you: 'you',\n        from: 'from',\n        anything: 'anything'\n    };\n\n    function* generatorFunction(target) {\n        const SYMBOL_TYPE = 'symbol';\n        let _this = target;\n        let handler = {\n            ownKeys(target){\n                // 过滤掉 Symbol.???\n                return Reflect.ownKeys(target).filter(key => typeof key !== SYMBOL_TYPE);\n            }\n        }\n        let proxy = new Proxy(_this, handler);\n        for (let key of  Object.keys(proxy)) {\n            yield [key, target[key]];\n        }\n    }\n\n    for (let [key, value] of generatorFunction(target)) {\n        console.log(\"[generator]  [test-\" + 4 + \"]  [key, value] = [\", key, \", \", value, \"]\");\n    }\n    console.log('');\n})();\n\n/**\n * 一些运算符\n */\n(() => {\n    function* saveGenerator() {\n        yield 'save'\n        yield 'you'\n        yield 'from'\n        yield 'anything'\n        return\n        yield 2233\n    }\n\n    console.log(\"[generator]  [test-\" + 5 + \"]  [...saveGenerator()] = \", [...saveGenerator()]);\n    console.log(\"[generator]  [test-\" + 5 + \"]  [Array.from(saveGenerator())] = \", Array.from(saveGenerator()));\n    let [s, y, f, a] = saveGenerator();\n    console.log(\"[generator]  [test-\" + 5 + \"]  [s] = \", s);\n    console.log(\"[generator]  [test-\" + 5 + \"]  [y] = \", y);\n    console.log(\"[generator]  [test-\" + 5 + \"]  [f] = \", f);\n    console.log(\"[generator]  [test-\" + 5 + \"]  [a] = \", a);\n})();"]}