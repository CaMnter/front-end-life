{"version":3,"sources":["generator-7.js"],"names":[],"mappings":"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","file":"generator-7-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*******************\n * yield* 语句 - A *\n ******************/\n\nrequire(\"babel-polyfill\");\n\n/**\n * Generator 方法内部，直接调用 Generator 是没效果的\n */\n(() => {\n    function* generatorFunction() {\n        yield 'save';\n        yield 'you';\n        generatorFunction();\n    };\n    for (let value of generatorFunction()) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n\n/**\n * yield*\n */\n(() => {\n    function* otherGeneratorFunction() {\n        yield 'from';\n        yield 'anything';\n    };\n    function* generatorFunctionA() {\n        yield 'save';\n        yield 'you';\n        yield* otherGeneratorFunction();\n    };\n    for (let value of generatorFunctionA()) {\n        console.log(\"[generator]  [test-\" + 2 + \"]  [value] = \", value);\n    }\n    console.log('');\n\n    // 等同于\n\n    function* generatorFunctionB() {\n        yield 'save';\n        yield 'you';\n        for (let value of otherGeneratorFunction()) {\n            yield value;\n        }\n    };\n    for (let value of generatorFunctionB()) {\n        console.log(\"[generator]  [test-\" + 3 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * yield Generator 与 yield* Generator\n */\n(() => {\n    function* otherGeneratorFunction() {\n        yield 2233;\n    };\n    /**\n     * yield Generator\n     */\n    function* generatorFunctionA() {\n        yield 'save';\n        yield 'you';\n        yield otherGeneratorFunction();\n    };\n    /**\n     * yield* Generator\n     */\n    function* generatorFunctionB() {\n        yield 'save';\n        yield 'you';\n        yield* otherGeneratorFunction();\n    };\n\n    let generatorA = generatorFunctionA();\n    let generatorB = generatorFunctionB();\n\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorA.next().value] = \", generatorA.next().value);\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorA.next().value] = \", generatorA.next().value);\n    // 返回一个 Iterator 对象\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorA.next().value] = \", generatorA.next().value);\n\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorB.next().value] = \", generatorB.next().value);\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorB.next().value] = \", generatorB.next().value);\n    console.log(\"[generator]  [test-\" + 4 + \"]  [generatorB.next().value] = \", generatorB.next().value);\n})();\n\n/**\n * yield* Generator 等同于 for...of Generator\n */\n(() => {\n    function* concatA(previousGenerator, afterGenerator) {\n        yield previousGenerator;\n        yield afterGenerator;\n    };\n    // 等同于\n    function* concatB(previousGenerator, afterGenerator) {\n        for (let value of previousGenerator) {\n            yield value;\n        }\n        for (let value of afterGenerator) {\n            yield value;\n        }\n    };\n})();"]}