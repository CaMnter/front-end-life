{"version":3,"sources":["generator-8.js"],"names":[],"mappings":"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","file":"generator-8-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*******************\n * yield* 语句 - B *\n ******************/\n\nrequire(\"babel-polyfill\");\n\n/**\n * yield* Generator 的话，会 for...of 这个 Generator\n * yield* Iterator 的话，也会 for...of 这个 Iterator\n * 数组也是有自己的 Iterator\n * 所有，yield* 数组，就会直接遍历这个数组\n */\n(() => {\n    function* generatorFunction() {\n        yield* ['save', 'you', 'from', 'anything'];\n    };\n    var generator = generatorFunction();\n    for (let value of generator) {\n        console.log(\"[generator]  [test-\" + 1 + \"]  [value] = \", value);\n    }\n    generator = generatorFunction();\n    console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next());\n    console.log(\"[generator]  [test-\" + 1 + \"]  [generator.next()] = \", generator.next(), '\\n');\n})();\n\n/**\n * 只要有 Iterator 接口，就可以被 yield* 遍历\n */\n(() => {\n    function* generatorFunction() {\n        yield* 'Save';\n    };\n    for (let char of generatorFunction()) {\n        console.log(\"[generator]  [test-\" + 2 + \"]  [char] = \", char);\n    }\n    console.log('');\n})();\n\n/**\n * yield* Generator return\n */\n(() => {\n    function* otherGeneratorFunction() {\n        yield 22;\n        yield 33;\n        return 'otherGeneratorFunction';\n    };\n    function* generatorFunction() {\n        yield 11;\n        let returnValue = yield* otherGeneratorFunction();\n        console.log(\"[generator]  [test-\" + 3 + \"]  [returnValue] = \", returnValue);\n        yield 44;\n    };\n    let generator = generatorFunction();\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generator.next()] = \", generator.next());\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generator.next()] = \", generator.next());\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generator.next()] = \", generator.next());\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generator.next()] = \", generator.next());\n    console.log(\"[generator]  [test-\" + 3 + \"]  [generator.next()] = \", generator.next(), '\\n');\n})();\n\n\n(() => {\n    function* otherGeneratorFunction() {\n        yield 22;\n        yield 33;\n        return 'otherGeneratorFunction';\n    };\n    function* generator(targetGenerator) {\n        let returnValue = yield* targetGenerator;\n        console.log(\"[generator]  [test-\" + 4 + \"]  [returnValue] = \", returnValue);\n    };\n    console.log(\"[generator]  [test-\" + 4 + \"]  [...generator(otherGeneratorFunction())] = \", [...generator(otherGeneratorFunction())], '\\n');\n})();\n\n/**\n * 深度遍历\n */\n(() => {\n    let array = [11, [22, 33, [44, 55, [66, 77]]], [88, 99]];\n\n    function* depthTraversal(array) {\n        if (Array.isArray(array)) {\n            for (let element of array) {\n                yield* depthTraversal(element);\n            }\n        } else {\n            yield array;\n        }\n    };\n    for (let value of depthTraversal(array)) {\n        console.log(\"[generator]  [test-\" + 5 + \"]  [value] = \", value);\n    }\n    console.log('');\n})();\n\n/**\n * 遍历完全二叉树\n */\n(() => {\n    function Tree(left, current, right) {\n        this.left = left;\n        this.current = current;\n        this.right = right;\n    };\n    function* inorder(node) {\n        if (node) {\n            yield* inorder(node.left);\n            yield node.current;\n            yield* inorder(node.right);\n        }\n    };\n    function makeTree(array) {\n        if (array.length == 1)return new Tree(null, array[0], null);\n        return new Tree(makeTree(array[0]), array[1], makeTree(array[2]));\n    };\n    let tree = makeTree([[['a'], 'b', ['c']], 'd', [['e'], 'f', ['g']]]);\n    console.log(\"[generator]  [test-\" + 6 + \"]  [tree] = \", tree);\n    for (let node of inorder(tree)) {\n        console.log(\"[generator]  [test-\" + 6 + \"]  [node] = \", node);\n    }\n})();\n\n"]}