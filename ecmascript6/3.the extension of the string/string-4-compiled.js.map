{"version":3,"sources":["string-4.js"],"names":[],"mappings":"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","file":"string-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************************************\n * includes(), startsWith(), endsWith() *\n ****************************************/\n\n/**\n * 传统上，JavaScript 只有 indexOf 方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种\n * 新方法\n */\n\n/**\n * includes()：返回布尔值，表示是否找到了参数字符串。\n * startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\n * endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n *\n * 第二个参数，表示开始搜索的位置。\n * endsWith 的行为与其他两个方法有所不同。它针对前 n 个字符，而其他两个方法针对从第n个位置直到字符串结束\n */\n\nconst S1 = \"Save you from anything\";\nconst SAVE = \"Save\";\nconst ANYTHING = \"anything\";\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.includes(SAVE)] = \" + S1.includes(SAVE));\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.startsWith(SAVE)] = \" + S1.startsWith(SAVE));\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.startsWith(ANYTHING)] = \" + S1.endsWith(ANYTHING));\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.includes(ANYTHING, 10)] = \" + S1.includes(ANYTHING, 10));\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.startsWith(ANYTHING, 14)] = \" + S1.startsWith(ANYTHING, 14));\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[S1.endsWith(SAVE,3)] = \" + S1.endsWith(SAVE,3));\nconsole.log(\"\");\n\n\n/************\n * repeat() *\n ************/\n\n/**\n * repeat 方法返回一个新字符串，表示将原字符串重复 n 次\n */\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(0)] = \" + SAVE.repeat(0));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(1)] = \" + SAVE.repeat(1));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(2)] = \" + SAVE.repeat(2));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(3.9)] = \" + SAVE.repeat(3.9));\n// SAVE.repeat(Infinity); // 报错\n// SAVE.repeat(-1); // 报错\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(-0.9)] = \" + SAVE.repeat(-0.9));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat(NaN)] = \" + SAVE.repeat(NaN));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat('Save')] = \" + SAVE.repeat('Save'));\nconsole.log(\"[string]\\t\\t[test-\" + 2 + \"]\\t\\t[SAVE.repeat('6')] = \" + SAVE.repeat('6'));\nconsole.log(\"\");\n\n\n/**************\n * 模板字符串 *\n **************/\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[普通字符串] = \" + 'Save you from anything');\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[多行字符串] = \" + `Save\nyou from anything`);\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[多行字符串${}] = \" + `${SAVE}\nyou from ${ANYTHING}`);\n\n/**\n * 模板字符串甚至还能嵌套\n */\nconst data = [\n    { first: '<CaMnter>', last: '<CM>' },\n    { first: '<Save>', last: '<you from anything>' },\n];\n\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[tmpl(data)] = \" + tmpl(data));\n\n/**\n * 如果需要引用模板字符串本身，在需要时执行，可以像下面这样写\n */\n// 写法一\nlet returnString1 = 'return ' + '`Save you from ${arg}!`';\nlet f1 = new Function('arg', returnString1);\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[f1('anything')] = \" + f1('anything'));\n// 写法二\nlet returnString2 = '(arg) => `Save you from ${arg}!`';\nlet f2 = eval.call(null, returnString2);\nconsole.log(\"[string]\\t\\t[test-\" + 3 + \"]\\t\\t[f2('anything')] = \" + f2('anything'));\n\n"]}