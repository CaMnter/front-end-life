{"version":3,"sources":["string-1.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,oBAAvC;;AAEA;;;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,sCAAvC;;AAEA;;;;;;AAMA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,2BAAvC;;AAEA;;;AAGA;AACA;AACA;;AAEA","file":"string-1-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/************************\n * 字符的 Unicode 表示法 *\n ************************/\n\n/**\n * JavaScript 允许采用 \\u???? 形式表示一个字符，其中 ???? 表示字符的码点\n */\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[\\\\u0061] = \\u0061\");\n\n/**\n * 这种表示法只限于 \\u0000——\\uFFFF 之间的字符。超出这个范围的字符，必须用两个双字节的形式表达\n */\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[\\\\uD842\\\\uDFB7] = \\uD842\\uDFB7\");\n\n/**\n * 如果直接在\\u后面跟上超过 0xFFFF 的数值\n *\n * 如:\n * \\uFFFF6 , JavaScript会理解成 \\uFFFF + 6。由于 \\uFFFF 是一个不可打印字符，所以只会显示一个空格，后面跟着一个 6\n */\nconsole.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[\\\\uFFFF6] = \\uFFFF6\");\n\n/**\n * ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符\n */\n// console.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[\\\\u{FFFF6}] = \\u{FFFF6}\");\n// console.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[\\\\u{6F}] = \\u{6F}\");\n// console.log(\"[string]\\t\\t[test-\" + 1 + \"]\\t\\t[hell\\\\u{6F}] = hell\\u{6F}\");\n\n/**\n * JavaScript 共有 6 种方法可以表示一个字符\n */\n\n"]}