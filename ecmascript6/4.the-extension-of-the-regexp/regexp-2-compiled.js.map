{"version":3,"sources":["regexp-2.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;;;AAQA;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,2CAA3B,GAAyE,UAAU,IAAV,CAAe,cAAf,CAArF;;AAEA;;;;AAIA,IAAI,IAAI,IAAR;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,yBAA3B,GAAuD,MAAM,IAAN,CAAW,CAAX,CAAnE;AACA;;AAEA;;;;;;AAMA;AACA;AACA;;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA","file":"regexp-2-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/************\n * u 修饰符 *\n ************/\n\n/**\n * ES6 对正则表达式添加了 u 修饰符，含义为 “Unicode模式” ，用来正确处理大于 \\uFFFF 的 Unicode 字符。也\n * 就是说，会正确处理四个字节的 UTF-16 编码\n *\n * \\uD83D\\uDC2A 是一个四个字节的 UTF-16 编码，代表一个字符。但是，\n * ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符\n * ES6 就会识别其为一个字符\n */\n// /^\\uD83D/u.test('\\uD83D\\uDC2A'); // false\nconsole.log(\"[regexp]\\t\\t[test-\" + 1 + \"]\\t\\t[/^\\\\uD83D/.test('\\uD83D\\uDC2A')] = \" + /^\\uD83D/.test('\\uD83D\\uDC2A'));\n\n/**\n * 点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 0xFFFF 的 Unicode 字符，点字\n * 符不能识别，必须加上 u 修饰符。\n */\nvar s = '𠮷';\nconsole.log(\"[regexp]\\t\\t[test-\" + 1 + \"]\\t\\t[/^.$/.test(s)] = \" + /^.$/.test(s));\n// /^.$/u.test(s) // true\n\n/**\n * Unicode 字符表示法\n *\n * ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 u 修饰符，才能识别\n * 如果不加 u 修饰符，正则表达式无法识别 \\u{61} 这种表示法，只会认为这匹配 61 个连续的 u\n */\n// /\\u{61}/.test('a') // false\n// /\\u{61}/u.test('a') // true\n// /\\u{20BB7}/u.test('𠮷') // true\n\n/**\n * 量词\n *\n * 使用 u 修饰符后，所有量词都会正确识别码点大于 0xFFFF 的 Unicode 字符\n *\n * 只有在使用 u 修饰符的情况下，Unicode 表达式当中的大括号才会被正确解读，否则会被解读为量词\n */\n// /a{2}/.test('aa') // true\n// /a{2}/u.test('aa') // true\n// /'𠮷𠮷'{2}/.test('𠮷𠮷') // false\n// /'𠮷𠮷'{2}/u.test('𠮷𠮷') // true\n// /^\\u{3}$/.test('uuu') // true\n\n/**\n * 预定义模式\n *\n * u 修饰符也影响到预定义模式，能否正确识别码点大于 0xFFFF 的 Unicode 字符。\n *\n * 上面代码的 \\S 是预定义模式，匹配所有不是空格的字符。只有加了 u 修饰符，它才能正确匹配码点大于 0xFFFF  的\n * Unicode 字符。\n *\n * \\S 是预定义模式，匹配所有不是空格的字符。只有加了 u 修饰符，它才能正确匹配码点大于 0xFFFF 的 Unicode 字符。\n */\n// /^\\S$/.test('𠮷') // false\n// /^\\S$/u.test('𠮷') // true\n\n// function codePointLength(text) {\n//     var result = text.match(/[\\s\\S]/gu);\n//     return result ? result.length : 0;\n// }\n//\n// var s = '𠮷𠮷';\n//\n// s.length // 4\n// codePointLength(s) // 2\n\n/**\n * i 修饰符\n * 有些 Unicode 字符的编码不同，但是字型很相近，比如，\\u004B 与 \\u212A 都是大写的 K。\n * 不加 u 修饰符，就无法识别非规范的K字符。\n */\n// /[a-z]/i.test('\\u212A') // false\n// /[a-z]/iu.test('\\u212A') // true\n\n\n\n\n\n\n\n\n\n\n"]}