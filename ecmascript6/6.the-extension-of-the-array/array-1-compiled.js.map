{"version":3,"sources":["array-1.js"],"names":[],"mappings":"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","file":"array-1-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************\n * Array.from() *\n ****************/\n\n/**\n * Array.from 方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的\n * 对象（包括 ES6 新增的数据结构 Set 和 Map ）\n */\n\nlet json1 = {\n    \"0\": \"S\",\n    \"1\": \"a\",\n    \"2\": \"v\",\n    \"3\": \"e\",\n    \"all\": \"Save\",\n    length: 4\n};\nlet json2 = {\n    \"0\": \"S\",\n    \"1\": \"a\",\n    \"2\": \"v\",\n    \"3\": \"e\",\n    \"all\": \"Save\",\n    length: 5\n};\n\n// ES5\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[[].slice.call(json1)] = \" + [].slice.call(json1));\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[[].slice.call(json2)] = \" + [].slice.call(json2));\nconsole.log(\"\");\n\n// ES6\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[Array.from(json1)] = \" + Array.from(json1));\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[Array.from(json2)] = \" + Array.from(json2));\nconsole.log(\"\");\n\n(function f1(...args) {\n    console.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.from(arguments)] = \" + Array.from(arguments));\n}(\"Save\", \"you\", \"from\", \"anything\"));\nconsole.log(\"\");\n\n/**\n * 只要是部署了 Iterator 接口的数据结构，Array.from 都能将其转为数组\n */\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[Array.from('Save you from anything')] = \" + Array.from('Save you from anything'));\nlet set1 = new Set(['S', 'a', 'v', 'e']);\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[Array.from(set1)] = \" + Array.from(set1));\nconsole.log(\"\");\n\n/**\n * 扩展运算符（...）也可以将某些数据结构转为数组\n */\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[...'Save']] = \" + [...'Save']);\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[[...set1]]] = \" + [...set1]);\nlet map1 = new Map();\nmap1.set(\"name\", \"CaMnter\");\nmap1.set(\"sign\", \"Save you from anything\");\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[[...map1]]] = \" + [...map1]);\nconsole.log(\"\");\n\n/**\n * ES5 部署 Array.from\n */\nconst toArray = (() => Array.from ? Array.from : obj => [].slice.call(obj))();\n\n/**\n * Array.from 还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返\n * 回的数组\n */\nconst PREFIX = \"#\"\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[Array.from(set1, x => PREFIX + x)] = \" + Array.from(set1, x => PREFIX + x));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[Array.from(set1).map(x => PREFIX + x)] = \" + Array.from(set1).map(x => PREFIX + x));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[Array.from(set1, (x) => PREFIX + x)] = \" + Array.from(set1, (x) => PREFIX + x));\nconsole.log(\"\");\n\n/**\n * 将数组中布尔值为 false 的成员转为 0\n */\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[Array.from([2, , , , , , , , , , , , , , 6, 7], v => v || 0)] = \" + Array.from([2, , , , , , , , , , , , , , 6, 7], v => v || 0));\nconsole.log(\"\");\n\n/**\n * 返回各种数据的类型\n */\nfunction getTypes() {\n    return Array.from(arguments, v => typeof v);\n}\nconsole.log(\"[array]\\t\\t[test-\" + 6 + \"]\\t\\t[getTypes(null, [], {}, NaN, false, 2.67,set1,map1)] = \" + getTypes(null, [], {}, NaN, false, 2.67, set1, map1));\nconsole.log(\"\");\n\n/**\n * Array.from() 可以将各种值转为真正的数组，并且还提供 map 功能。这实际上意味着，只要有一个原始的数据结\n * 构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法\n *\n * Array.from 的第一个参数指定了第二个参数运行的次数。\n * 这种特性可以让该方法的用法变得非常灵活\n */\nconsole.log(\"[array]\\t\\t[test-\" + 7 + \"]\\t\\t[Array.from({length: 6}, () => 'Save')] = \" + Array.from({length: 6}, () => 'Save'));\nconsole.log(\"\");\n\n/**\n * Array.from() 的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字\n * 符，可以避免 JavaScript 将大于 \\uFFFF 的 Unicode 字符，算作两个字符的 bug\n */\nfunction countSymbols(string) {\n    return Array.from(string).length;\n}\nconsole.log(\"[array]\\t\\t[test-\" + 7 + \"]\\t\\t[countSymbols('𠮷Save')] = \" + countSymbols('𠮷Save'));\n"]}