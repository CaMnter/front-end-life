{"version":3,"sources":["array-2.js"],"names":[],"mappings":"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","file":"array-2-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/**************\n * Array.of() *\n **************/\n\n/**\n * Array.of 方法用于将一组值，转换为数组\n */\n\n/**\n * 这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异\n *\n * 参数 <2 时, 参数表示 数组长度\n * 参数 >2 时, 参数表示 数组的元素\n */\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[Array()] = \" + Array());\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[Array(6)] = \" + Array(6));\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[Array(2, 6, 7)] = \" + Array(2, 6, 7));\nconsole.log(\"\");\n\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[Array.of(2, 6, 7)] = \" + Array.of(2, 6, 7));\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[Array.of(7)] = \" + Array.of(7));\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[Array.of(7).length] = \" + Array.of(7).length);\nconsole.log(\"\");\n\n/**\n * Array.of 基本上可以用来替代 Array() 或 new Array()\n * 并且不存在由于参数不同而导致的重载。它的行为非常统一\n */\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.of()] = \" + Array.of());\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.of(undefined)] = \" + Array.of(undefined));\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.of(7)] = \" + Array.of(7));\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[Array.of(6, 7)] = \" + Array.of(6, 7));\nconsole.log(\"\");\n\n/**\n * ES5 部署 Array.of\n */\nfunction ArrayOf() {\n    return [].slice.call(arguments);\n}\n\n\n/****************\n * copyWithin() *\n ****************/\n\n/**\n * 数组实例的 copyWithin 方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回\n * 当前数组\n *\n * Array.prototype.copyWithin(target, start = 0, end = this.length)\n * -  target（必需）：从该位置开始替换数据。\n * -  start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。\n * -  end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\n */\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[0, 1, 2, 3, 4].copyWithin(0, 3)] = \" + [0, 1, 2, 3, 4].copyWithin(0, 3));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[0, 1, 2, 3, 4].copyWithin(0, 3, 4)] = \" + [0, 1, 2, 3, 4].copyWithin(0, 3, 4));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[0, 1, 2, 3, 4].copyWithin(0, 3, 4)] = \" + [0, 1, 2, 3, 4].copyWithin(0, -2, -1));\nconsole.log(\"\");\n// 将 7 号位复制到 6 号位\nlet array1 = [].copyWithin.call({\n    length: 8,\n    7: 2\n}, 6, 7);\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[array1[7]] = \" + array1[7]);\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[array1[6]] = \" + array1[6]);\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[new Int32Array([0, 1, 2, 3, 4]).copyWithin(0, 2)] = \" + new Int32Array([0, 1, 2, 3, 4]).copyWithin(0, 2));\nconsole.log(\"\");\n\n/**\n * ES5 部署 copyWithin\n * 利用 [].copyWithin.call()\n */\nconsole.log(\"[array]\\t\\t[test-\" + 6 + \"]\\t\\t[[].copyWithin.call(new Int32Array([0, 1, 2, 3, 4]), 0, 3, 4)] = \" + [].copyWithin.call(new Int32Array([0, 1, 2, 3, 4]), 0, 3, 4));\n\n\n\n"]}