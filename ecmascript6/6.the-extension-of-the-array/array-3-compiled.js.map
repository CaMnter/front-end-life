{"version":3,"sources":["array-3.js"],"names":[],"mappings":"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","file":"array-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*************************\n * find() 和 findIndex() *\n *************************/\n\n/**\n * 数组实例的 find 方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回\n * 调函数，直到找出第一个返回值为 true 的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined\n */\nconsole.log(\"[array]\\t\\t[test-\" + 1 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].find(n => n < 0)] = \" + [-2, -6, -7, 2, 6, 7].find(n => n < 0));\nconsole.log(\"\");\n\n/**\n * find 方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组\n */\nconsole.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].find(n => n < 0)] = \" + [-2, -6, -7, 2, 6, 7].find(function (value, index, array) {\n        console.log(\"[array]\\t\\t[test-\" + 2 + \"]\\t\\t[value] = \" + value + \"\\t\\t[index] = \" + index + \"\\t\\t[array] = \" + array);\n        return value > 2;\n    }));\nconsole.log(\"\");\n\n/**\n * findIndex 方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的 [位置]，如果所有成员都不符合条件\n * 则返回-1\n */\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].find(n => n > 2)] = \" + [-2, -6, -7, 2, 6, 7].find(n => n > 2));\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].find(n => n > 26)] = \" + [-2, -6, -7, 2, 6, 7].find(n => n > 26));\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].findIndex(n => n > 2)] = \" + [-2, -6, -7, 2, 6, 7].findIndex(n => n > 2));\nconsole.log(\"[array]\\t\\t[test-\" + 3 + \"]\\t\\t[[-2, -6, -7, 2, 6, 7].findIndex(n => n > 26)] = \" + [-2, -6, -7, 2, 6, 7].findIndex(n => n > 26));\nconsole.log(\"\");\n\n/**\n * 这两个方法都可以发现 NaN，弥补了数组的 IndexOf 方法的不足\n */\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[NaN].indexOf(NaN)] = \" + [NaN].indexOf(NaN));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[NaN].find(v => Object.is(NaN, v))] = \" + [NaN].find(v => Object.is(NaN, v)));\nconsole.log(\"[array]\\t\\t[test-\" + 4 + \"]\\t\\t[[NaN].findIndex(v => Object.is(NaN, v))] = \" + [NaN].findIndex(v => Object.is(NaN, v)));\nconsole.log(\"\");\n\n\n/**********\n * fill() *\n **********/\n\n/**\n * fill 方法使用给定值，填充一个数组\n */\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[['S', 'a', 'v', 'e'].fill(7)] = \" + ['S', 'a', 'v', 'e'].fill(7));\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[new Array(7).fill(7)] = \" + new Array(7).fill(7));\nconsole.log(\"\");\n\n/**\n * fill 方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去\n * fill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置\n */\nconsole.log(\"[array]\\t\\t[test-\" + 5 + \"]\\t\\t[['S', 'a', 'v', 'e'].fill(7, 3, 4)] = \" + ['S', 'a', 'v', 'e'].fill(7, 3, 4));\nconsole.log(\"\");\n\n\n/*********************************\n * entries()，keys() 和 values() *\n *********************************/\n\n/**\n * keys() 是对键名的遍历\n * values() 是对键值的遍历\n * entries() 是对键值对\n */\n\nfor (let key of ['S', 'a', 'v', 'e'].keys()) {\n    console.log(\"[array]\\t\\t[test-\" + 6 + \"]\\t\\t[key] = \" + key);\n}\nconsole.log(\"\");\nfor (let value of ['S', 'a', 'v', 'e']) {\n    console.log(\"[array]\\t\\t[test-\" + 7 + \"]\\t\\t[value] = \" + value);\n}\nconsole.log(\"\");\nfor (let [key,value] of ['S', 'a', 'v', 'e'].entries()) {\n    console.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[key] = \" + key + \"\\t\\t[value] = \" + value);\n}\nconsole.log(\"\");\n\nlet entries = ['S', 'a', 'v', 'e'].entries();\nconsole.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[entries.next().value] = \" + entries.next().value);\nconsole.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[entries.next().value] = \" + entries.next().value);\nconsole.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[entries.next().value] = \" + entries.next().value);\nconsole.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[entries.next().value] = \" + entries.next().value);\nconsole.log(\"[array]\\t\\t[test-\" + 8 + \"]\\t\\t[entries.next().value] = \" + entries.next().value);\n\n\n\n"]}