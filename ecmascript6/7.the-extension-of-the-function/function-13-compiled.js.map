{"version":3,"sources":["function-13.js"],"names":[],"mappings":"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","file":"function-13-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/**********\n * 尾递归 *\n **********/\n\n/**\n * 如果尾调用自身，就称为 尾递归\n *\n * 递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生 “栈溢出” 错误（stack overflow）。但对于\n * 尾递归来说，由于只存在一个调用帧，所以永远不会发生 “栈溢出” 错误\n */\n\n/**\n * 最多需要保存 n 个调用记录，复杂度 O(n)\n *\n * 不属于 尾递归, 因为不是直接 return 方法, 而且 return z*方法\n */\nfunction f1(z) {\n    if (z === 1)return 1;\n    return z * f1(z - 1);\n}\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[f1(5)] = \" + f1(5));\nconsole.log(\"\");\n\n/**\n * 尾递归  复杂度 O(1)\n */\nfunction f2(z, total) {\n    if (z === 1)return total;\n    return f2(z - 1, z * total);\n}\nconsole.log(\"[function]\\t\\t[test-\" + 2 + \"]\\t\\t[f2(5, 1)] = \" + f2(5, 1));\nconsole.log(\"\");\n\n\n/**\n * 非尾递归 Fibonacci\n */\nfunction fibonacciA(z) {\n    if (z <= 1)return 1;\n    return fibonacciA(z - 1) + fibonacciA(z - 2);\n}\nconsole.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[fibonacciA(10)] = \" + fibonacciA(10));\n\n// 溢出\n// console.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[fibonacciA(100)] = \" + fibonacciA(100));\n// console.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[fibonacciA(777)] = \" + fibonacciA(777));\nconsole.log(\"\");\n\n\n/**\n * @return {number}\n */\nfunction FibonacciB(z, last = 1, total = 1) {\n    if (z <= 1) {\n        return total;\n    }\n\n    return FibonacciB(z - 1, total, last + total);\n}\nconsole.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[FibonacciB(100)] = \" + FibonacciB(100));\nconsole.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[FibonacciB(1000)] = \" + FibonacciB(1000));\nconsole.log(\"[function]\\t\\t[test-\" + 3 + \"]\\t\\t[FibonacciB(1000)] = \" + FibonacciB(1000));\nconsole.log(\"\");\n\n\n/*****************\n * 递归函数的改写 *\n *****************/\n\n/**\n * 尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。\n * 做到这一点的方法，就是把所有用到的内部变量改写成函数的参数\n *\n * factorial 需要用到一个中间变量 total ，那就把这个中间变量改写成函数的参数。\n * 这样做的缺点就是不太直观，第一眼很难看出来\n * 需要传入 两个值\n */\n\n/**\n * 方法一\n * 是在尾递归函数之外，再提供一个正常形式的函数。\n */\n\nfunction tailFactorial(n, total) {\n    if (n === 1) return total;\n    return tailFactorial(n - 1, n * total);\n}\n\nfunction factorialC(n) {\n    return tailFactorial(n, 1);\n}\n\nconsole.log(\"[function]\\t\\t[test-\" + 4 + \"]\\t\\t[factorialC(167)] = \" + factorialC(167));\nconsole.log(\"\");\n\n/**\n * 函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化\n */\nfunction currying(fn, n) {\n    return function (m) {\n        return fn.call(this, m, n);\n    };\n}\n\nconst factorialD = currying(tailFactorial, 1);\nconsole.log(\"[function]\\t\\t[test-\" + 5 + \"]\\t\\t[factorialD(167)] = \" + factorialD(167));\nconsole.log(\"\");\n\n/**\n * 第二种\n * 就是采用 ES6 的函数默认值。\n */\nfunction factorialE(n, total = 1) {\n    if (n === 1) return total;\n    return factorialE(n - 1, n * total);\n}\nconsole.log(\"[function]\\t\\t[test-\" + 6 + \"]\\t\\t[factorialE(167)] = \" + factorialE(167));\n\n"]}