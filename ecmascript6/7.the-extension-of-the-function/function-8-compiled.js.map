{"version":3,"sources":["function-8.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;AAIA,SAAS,EAAT,GAAc,CAEb;AACD,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,mBAA7B,GAAmD,GAAG,IAAlE;;AAEA;;;;AAIA,IAAI,KAAK,SAAL,EAAK,GAAY,CAEpB,CAFD;AAGA,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,mBAA7B,GAAmD,GAAG,IAAlE;AACA,IAAI,KAAK,SAAS,EAAT,GAAc,CAEtB,CAFD;AAGA,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,mBAA7B,GAAmD,GAAG,IAAlE;;AAEA;;;AAGA,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,+BAA7B,GAAgE,IAAI,QAAJ,EAAD,CAAe,IAA1F;;AAEA;;;AAGA,SAAS,EAAT,GAAc,CACb;AACD,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,4BAA7B,GAA4D,GAAG,IAAH,CAAQ,EAAR,EAAY,IAApF;AACA,QAAQ,GAAR,CAAY,yBAAyB,CAAzB,GAA6B,0CAA7B,GAA2E,YAAY,CAAE,CAAf,CAAiB,IAAjB,CAAsB,EAAtB,EAA0B,IAAhH","file":"function-8-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*************\n * name 属性 *\n *************/\n\n/**\n * 函数的 name 属性，返回该函数的函数名\n */\n\nfunction f1() {\n\n}\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[f1.name] = \" + f1.name);\n\n/**\n * ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的 name 属性，会返回空字符\n * 串，而 ES6 的 name 属性会返回实际的函数名\n */\nvar f2 = function () {\n\n}\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[f2.name] = \" + f2.name);\nvar f3 = function f4() {\n\n}\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[f3.name] = \" + f3.name);\n\n/**\n * Function 构造函数返回的函数实例，name 属性的值为 anonymous\n */\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[(new Function).name] = \" + (new Function).name);\n\n/**\n * bind 返回的函数，name 属性值会加上 bound 前缀\n */\nfunction f5() {\n};\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[f5.bind({}).name] = \" + f5.bind({}).name);\nconsole.log(\"[function]\\t\\t[test-\" + 1 + \"]\\t\\t[(function () {}).bind({}).name] = \" + (function () {}).bind({}).name);"]}