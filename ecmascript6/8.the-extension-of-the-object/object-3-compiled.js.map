{"version":3,"sources":["object-3.js"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAIA;;;;AAIA,IAAM,KAAK;AACP,MADO,kBACD,CAEL;AAHM,CAAX;AAKA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,wBAA3B,GAAsD,GAAG,IAAH,CAAQ,IAA1E;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;;;AAKA,IAAM,KAAK;AACP,MAAI,IAAJ,GAAW,CACV,CAFM;AAGP,MAAI,IAAJ,CAAS,CAAT,EAAY,CACX;AAJM,CAAX;AAMA;AACA,IAAM,OAAO,OAAO,wBAAP,CAAgC,EAAhC,EAAoC,MAApC,CAAb;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,yBAA3B,GAAuD,KAAK,GAAL,CAAS,IAA5E;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,yBAA3B,GAAuD,KAAK,GAAL,CAAS,IAA5E;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;;;AAKA,IAAI,KAAK,SAAL,EAAK,GAAY,CAEpB,CAFD;AAGA,IAAI,KAAK,EAAT;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,iCAA3B,GAAgE,IAAI,QAAJ,EAAD,CAAiB,IAA5F;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,4BAA3B,GAA0D,GAAG,IAAH,CAAQ,EAAR,EAAY,IAAlF;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;AAGA,IAAM,OAAO,OAAO,aAAP,CAAb;AACA,IAAM,OAAO,QAAb;AACA,IAAI,wCACC,IADD,cACS,CACR,CAFD,yBAGC,IAHD,cAGS,CACR,CAJD,QAAJ;AAMA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,0BAA3B,GAAwD,IAAI,IAAJ,EAAU,IAA9E;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,0BAA3B,GAAwD,IAAI,IAAJ,EAAU,IAA9E","file":"object-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/********************\n * 方法的 name 属性 *\n ********************/\n\n/**\n * 函数的name属性，返回函数名\n * 对象方法也是函数\n */\nconst o1 = {\n    o1f1(){\n\n    }\n};\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[o1.o1f1.name] = \" + o1.o1f1.name);\nconsole.log('');\n\n/**\n * setter getter\n *\n * 该方法的属性的描述对象的 get 和 set 属性上面，返回值是方法名前加上 get 和 set\n */\nconst o2 = {\n    get o2f1() {\n    },\n    set o2f1(v) {\n    }\n};\n// 要这么取\nconst o2f1 = Object.getOwnPropertyDescriptor(o2, 'o2f1');\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[o2f1.get.name] = \" + o2f1.get.name);\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[o2f1.set.name] = \" + o2f1.set.name);\nconsole.log(\"\");\n\n/**\n * 特殊情况:\n * 1. bind 方法创造的函数，name 属性返回 bound 加上原函数的名\n * 2. Function 构造函数创造的函数，name 属性返回 anonymous\n */\nlet f1 = function () {\n\n};\nlet o3 = {};\nconsole.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[(new Function()).name] = \" + (new Function()).name);\nconsole.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[f1.bind(o3).name] = \" + f1.bind(o3).name);\nconsole.log(\"\");\n\n/**\n * 对象的方法是一个 Symbol 值，那么 name 属性返回的是这个 Symbol 值的描述\n */\nconst key1 = Symbol('description');\nconst key2 = Symbol();\nlet obj = {\n    [key1]() {\n    },\n    [key2]() {\n    }\n};\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[obj[key1].name] = \" + obj[key1].name);\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[obj[key2].name] = \" + obj[key2].name);\n\n"]}