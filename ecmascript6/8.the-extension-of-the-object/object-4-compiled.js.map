{"version":3,"sources":["object-4.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;;AAOA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,qCAA3B,GAAmE,OAAO,EAAP,CAAU,MAAV,EAAkB,MAAlB,CAA/E;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,6BAA3B,GAA2D,OAAO,EAAP,CAAU,EAAV,EAAc,EAAd,CAAvE;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;;AAIA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,uBAA3B,IAAsD,CAAC,CAAD,KAAO,CAAC,CAA9D,CAAZ;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,yBAA3B,IAAwD,QAAQ,GAAhE,CAAZ;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,6BAA3B,GAA2D,OAAO,EAAP,CAAU,CAAC,CAAX,EAAc,CAAC,CAAf,CAAvE;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,+BAA3B,GAA6D,OAAO,EAAP,CAAU,GAAV,EAAe,GAAf,CAAzE;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;AACA,OAAO,cAAP,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC;AAChC,SAAO,eAAU,CAAV,EAAa,CAAb,EAAgB;AACnB,QAAI,MAAM,CAAV,EAAa;AACT;AACA,aAAO,MAAM,CAAN,IAAW,IAAI,CAAJ,KAAU,IAAI,CAAhC;AACH;AACD;AACA,WAAO,MAAM,CAAN,IAAW,MAAM,CAAxB;AACH,GAR+B;AAShC,gBAAc,IATkB;AAUhC,cAAY,KAVoB;AAWhC,YAAU;AAXsB,CAApC;AAaA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,6BAA3B,GAA2D,OAAO,EAAP,CAAU,CAAC,CAAX,EAAc,CAAC,CAAf,CAAvE;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,+BAA3B,GAA6D,OAAO,EAAP,CAAU,GAAV,EAAe,GAAf,CAAzE","file":"object-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***************\n * Object.is() *\n ***************/\n\n/**\n * ==    会自动转换数据类型\n * ===   NaN 不等于自身, 以及 +0 等于 -0\n *\n * ES6 提出 “Same-value equality”（同值相等）算法，用来解决这个问题。Object.is 就是部署这个算法的新方法。\n * 它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致\n */\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[Object.is('Save', 'Save')] = \" + Object.is('Save', 'Save'));\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[Object.is({}, {})] = \" + Object.is({}, {}));\nconsole.log(\"\");\n\n/**\n * 可以判断 +0 和 -0 是不等的\n * 可以判断 NaN 等于 NaN\n */\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[(+0 === -0)] = \" + (+0 === -0));\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[(NaN === NaN)] = \" + (NaN === NaN));\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.is(+0, -0)] = \" + Object.is(+0, -0));\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.is(NaN, NaN)] = \" + Object.is(NaN, NaN));\nconsole.log(\"\");\n\n// ES5 部署 Object.is\nObject.defineProperty(Object, 'is', {\n    value: function (x, y) {\n        if (x === y) {\n            // 针对 +0 不等于 -0 的情况\n            return x !== 0 || 1 / x === 1 / y;\n        }\n        // 针对 NaN 的情况\n        return x !== x && y !== y;\n    },\n    configurable: true,\n    enumerable: false,\n    writable: true\n});\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.is(+0, -0)] = \" + Object.is(+0, -0));\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.is(NaN, NaN)] = \" + Object.is(NaN, NaN));"]}