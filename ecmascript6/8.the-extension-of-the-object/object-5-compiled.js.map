{"version":3,"sources":["object-5.js"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAIA;;;;;;;;;AASA,IAAI,KAAK,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,IAAI,KAAK,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,IAAI,KAAK,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,IAAI,KAAK,OAAO,MAAP,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,CAAT;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,EAAvD;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,oCAA3B,IAAmE,OAAO,MAAP,CAAc,EAAd,MAAsB,EAAzF,CAAZ;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,oCAA3B,WAA0E,OAAO,MAAP,CAAc,GAAd,CAA1E,CAAZ;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;AAGA;AACA;;;AAGA;;;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,0CAAvC,EAAoF,OAAO,MAAP,CAAc,EAAd,EAAkB,IAAlB,MAA4B,EAAhH;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,+CAAvC,EAAyF,OAAO,MAAP,CAAc,EAAd,EAAkB,SAAlB,MAAiC,EAA1H;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,KAAK,MAAT;AACA,IAAI,KAAK,IAAT;AACA,IAAI,KAAK,EAAT;;AAEA,IAAI,KAAK,OAAO,MAAP,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,CAAT;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,EAAvD;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAGA;;;;;;;AAOA,OAAO,IAAP,E,CAAa;AACb,OAAO,EAAP,E,CAAY;AACZ,OAAO,KAAP,E,CAAc;;AAEd;;;;;;;AAOA,IAAI,KAAK,OAAO,MAAP,CAAc,EAAC,GAAG,GAAJ,EAAd,EACL,OAAO,cAAP,CAAsB,EAAtB,EAA0B,WAA1B,EAAuC;AACnC,cAAY,KADuB;AAEnC,SAAO;AAF4B,CAAvC,CADK,CAAT;AAMA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,EAAvD,EAA2D,IAA3D;;AAEA;;;AAGA,IAAI,KAAK,OAAO,MAAP,CAAc,EAAE,GAAG,GAAL,EAAd,sBAA6B,OAAO,GAAP,CAA7B,EAA2C,GAA3C,EAAT;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,EAAvD,EAA2D,IAA3D","file":"object-5-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/*****************\n * Object.assign *\n *****************/\n\n/**\n * Object.assign 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）\n *\n * 第一个参数是目标对象\n * 后面的参数都是源对象\n *\n * 如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性\n */\n\nvar t1 = {s: 2, a: 0};\nvar s1 = {v: 0, e: 0};\nvar s2 = {v: 6, e: 7};\nvar r1 = Object.assign(t1, s1, s2);\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[r1] = \", r1);\nconsole.log('');\n\n/**\n * 如果只有一个参数，Object.assign 会直接返回该参数\n */\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.assign(t1) === t1] = \" + (Object.assign(t1) === t1));\nconsole.log('');\n\n/**\n * 如果不是 对象, 就会先转为对象\n */\nconsole.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[Object.assign(t1) === t1] = \" + (typeof Object.assign(267)));\nconsole.log('');\n\n/**\n * undefined 和 null 无法转成对象，所以如果它们作为参数，就会报错\n */\n// Object.assign(null);\n// Object.assign(undefined);\n\n\n/**\n * undefined 和 null 不在首参就好了\n */\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[Object.assign(t1, null) === t1] = \", (Object.assign(t1, null) === t1));\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[Object.assign(t1, undefined) === t1] = \", (Object.assign(t1, undefined) === t1));\nconsole.log('');\n\nvar s3 = 'Save';\nvar s4 = true;\nvar s5 = 10;\n\nvar r2 = Object.assign({}, s3, s4, s5);\nconsole.log(\"[object]\\t\\t[test-\" + 5 + \"]\\t\\t[r2] = \", r2);\nconsole.log('');\n\n\n/**\n * 布尔值、数值、字符串分别转成对应的包装对象\n * 原始值都在包装对象的内部属性 [[PrimitiveValue]] 上面\n *\n * 这个属性是不会被 Object.assign 拷贝的。只有字符串的包装对象，会\n * 产生可枚举的实义属性，那些属性则会被拷贝\n */\nObject(true) // {[[PrimitiveValue]]: true}\nObject(10)  //  {[[PrimitiveValue]]: 10}\nObject('abc') // {0: \"S\", 1: \"a\", 2: \"v\", 3: \"e\", length: 4, [[PrimitiveValue]]: \"Save\"}\n\n/**\n * Object.assign 拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性\n * （ enumerable: false ）\n *\n * Object.assign 要拷贝的对象只有一个不可枚举属性 invisible，这个属性\n * 并没有被拷贝进去\n */\nvar r3 = Object.assign({b: 'c'},\n    Object.defineProperty({}, 'invisible', {\n        enumerable: false,\n        value: 'hello'\n    })\n)\nconsole.log(\"[object]\\t\\t[test-\" + 6 + \"]\\t\\t[r3] = \", r3, '\\n');\n\n/**\n * 属性名为 Symbol 值的属性，也会被 Object.assign 拷贝\n */\nvar r4 = Object.assign({ a: 'b' }, { [Symbol('c')]: 'd' })\nconsole.log(\"[object]\\t\\t[test-\" + 7 + \"]\\t\\t[r4] = \", r4, '\\n');\n"]}