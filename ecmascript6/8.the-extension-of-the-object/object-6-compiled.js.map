{"version":3,"sources":["object-6.js"],"names":[],"mappings":"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","file":"object-6-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n\n/************************\n * Object.assign 注意点 *\n ************************/\n\n/**\n * Object.assign 方法实行的是浅拷贝, 不是深拷贝\n *\n * 如果拷贝的是一个对象的话, 得到的是对象的引用. 这样的话, 对象的值, 拷贝的也跟着变\n */\nvar o1 = {s: {save: 'Save'}};\nvar o2 = Object.assign({}, o1);\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[o1.s.save] = \", o1.s.save);\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[o2.s.save] = \", o2.s.save);\no1.s.save = 'Save you from anything'\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[修改 o1 后 o1.s.save] = \", o1.s.save);\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[修改 o1 后 o2.s.save] = \", o2.s.save, '\\n');\n\n/**\n * 如果对象一样, 里面的属性不一样.\n *\n * 并不会保留差异属性, 只会全部替换对象\n */\nvar o3 = {s: {save: 'Save', name: 'CaMnter'}};\nvar o4 = {s: {save: 'Save you from anything'}};\nvar o5 = Object.assign(o3, o4);\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[o5.s.save] = \", o5.s.save, '\\n');\n\n/**\n * 可以合并数组, 会把数组视为对象\n * [1, 2, 3] = {0:1, 1:2, 2:3}\n * [4, 5] = {0:4, 1:5}\n *\n * 0 和 1 被覆盖 得到 {0:4, 1:5, 2:3}\n */\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.assign([1, 2, 3], [4, 5])] = \", Object.assign([1, 2, 3], [4, 5]), '\\n');\n\n\n/**************************\n * Object.assign 常见用途 *\n **************************/\n\n/**\n * 为对象添加属性\n *\n * Point 对象添加 x y 属性\n */\nclass Point {\n    constructor(x, y) {\n        Object.assign(this, {x, y});\n    }\n}\n\n/**\n * 为对象添加方法\n */\nfunction ClassA() {\n\n}\nObject.assign(ClassA.prototype, {\n    getCamnter() {\n        this.camnter;\n    },\n    setCamnter(camnter) {\n        this.camnter = camnter;\n    }\n})\n\n// 等同于\nClassA.prototype.getCamnter = function () {\n    this.camnter;\n}\nClassA.prototype.setCamnter = function (camnter) {\n    this.camnter = camnter;\n}\n\n/**\n * 克隆对象\n *\n * 无法克隆对象继承的值\n */\nfunction clone(origin) {\n    return Object.assign({}, origin);\n}\n\n/**\n * 克隆对象\n *\n * 克隆对象继承的值\n */\nfunction smartClone(target) {\n    let prototype = Object.getPrototypeOf(target);\n    return Object.assign(Object.create(prototype), target);\n}\n\n/**\n * 合并 N 个对象\n *\n * 配上箭头函数\n */\nconst mergeA = (target, ...source) => Object.assign(target, ...source);\nconst mergeB = (...source) => Object.assign({}, ...source);\n\n/**\n * 为属性指定默认值\n *\n * 如果 合并的属性是 对象,那么同名的属性会被该 对象覆盖.\n *\n * 由于存在深拷贝的问题，DEFAULTS 对象和 options 对象的所有属性的值，都只能是简单类型，而\n * 不能指向另一个对象。否则，将导致 DEFAULTS 对象的该属性不起作用\n */\nconst DEFAULTS = {\n    COUNT: 0,\n    TAG: 'DEFAULTS'\n};\nfunction processContent(options) {\n    options = Object.assign({}, DEFAULTS, options);\n}\n\n\n"]}