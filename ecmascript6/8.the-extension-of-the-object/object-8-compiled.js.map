{"version":3,"sources":["object-8.js"],"names":[],"mappings":";;;;AAAA;;;;AAIA;;;;AAIA,IAAI,UAAU;AACV,UAAM,SADI;AAEV,UAAM,yBAFI;AAGV,UAAM,wBAHI;AAIV,YAAQ,OAAO,KAAP;AAJE,CAAd;;AAOA;;;;;AAKA,CAAC,YAAY;AACT,SAAK,IAAI,IAAT,IAAiB,OAAjB,EAA0B;AACtB,YAAI,CAAC,QAAQ,cAAR,CAAuB,IAAvB,CAAL,EAAkC;AAClC,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,oBAAvC,EAA6D,QAAQ,IAAR,CAA7D;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAND;;AASA;;;;;AAKA,CAAC,YAAY;AACT,QAAI,aAAa,OAAO,IAAP,CAAY,OAAZ,CAAjB;AACA,SAAK,IAAI,IAAT,IAAiB,UAAjB,EAA6B;AACzB,YAAI,CAAC,WAAW,cAAX,CAA0B,IAA1B,CAAL,EAAqC;AACrC,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,4BAAvC,EAAqE,QAAQ,WAAW,IAAX,CAAR,CAArE;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAPD;;AASA;;;;;AAKA,CAAC,YAAY;AACT,QAAI,gBAAgB,OAAO,mBAAP,CAA2B,OAA3B,CAApB;AACA,SAAK,IAAI,YAAT,IAAyB,aAAzB,EAAwC;AACpC,YAAI,CAAC,cAAc,cAAd,CAA6B,YAA7B,CAAL,EAAgD;AAChD,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,2CAAvC,EAAoF,QAAQ,cAAc,YAAd,CAAR,CAApF;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAPD;;AASA;;;;;AAKA,CAAC,YAAY;AACT,QAAI,kBAAkB,OAAO,qBAAP,CAA6B,OAA7B,CAAtB;AACA,SAAK,IAAI,cAAT,IAA2B,eAA3B,EAA4C;AACxC,YAAI,CAAC,gBAAgB,cAAhB,CAA+B,cAA/B,CAAL,EAAoD;AACpD,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,6CAAvC,EAAsF,QAAQ,cAAR,CAAtF;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAPD;;AASA;;;;;AAKA,CAAC,YAAY;AACT,QAAI,OAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAX;AACA,SAAK,IAAI,GAAT,IAAgB,IAAhB,EAAsB;AAClB,YAAI,CAAC,KAAK,cAAL,CAAoB,GAApB,CAAL,EAA8B;AAC9B,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,gCAAvC,EAAyE,QAAQ,KAAK,GAAL,CAAR,CAAzE;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CAPD;;AASA;;;;;;;;AAQA;;;;;AAKA,CAAC,YAAY;AAAA;;AACT,QAAI,OAAO,QAAQ,OAAR,2DAAkB,QAAlB,EAA6B,CAA7B,0CAAmC,CAAnC,qCAAsC,EAAtC,EAA0C,CAA1C,qCAA6C,CAA7C,EAAgD,CAAhD,0CAAsD,CAAtD,qBAAX;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,gCAAvC,EAAyE,IAAzE;AACH,CAHD","file":"object-8-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/**************\n * 属性的遍历 *\n **************/\n\nvar camnter = {\n    name: \"CaMnter\",\n    blog: \"https://www.camnter.com\",\n    sign: \"Save you from anything\",\n    symbol: Symbol('233')\n};\n\n/**\n * 1. for...in\n *\n * 循环遍历对象自身的和继承的可枚举属性（ 不含 Symbol 属性）\n */\n(function () {\n    for (var attr in camnter) {\n        if (!camnter.hasOwnProperty(attr))continue;\n        console.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[for...in] = \", camnter[attr]);\n    }\n    console.log('');\n})();\n\n\n/**\n * 2. Object.keys(obj)\n *\n * 返回一个数组，包括对象自身的（ 不含继承的 ）所有可枚举属性（ 不含 Symbol 属性 ）\n */\n(function () {\n    var attributes = Object.keys(camnter);\n    for (var attr in attributes) {\n        if (!attributes.hasOwnProperty(attr))continue;\n        console.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.keys(obj)] = \", camnter[attributes[attr]]);\n    }\n    console.log('');\n})();\n\n/**\n * 3. Object.getOwnPropertyNames(obj)\n *\n * 返回一个数组，包含对象自身的所有属性（ 不含 Symbol 属性，但是包括不可枚举属性 ）\n */\n(function () {\n    var propertyNames = Object.getOwnPropertyNames(camnter);\n    for (var propertyName in propertyNames) {\n        if (!propertyNames.hasOwnProperty(propertyName))continue;\n        console.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[Object.getOwnPropertyNames(obj)] = \", camnter[propertyNames[propertyName]]);\n    }\n    console.log('');\n})();\n\n/**\n * 4. Object.getOwnPropertySymbols(obj)\n *\n * 返回一个数组，包含对象自身的所有 Symbol 属性\n */\n(function () {\n    var propertySymbols = Object.getOwnPropertySymbols(camnter);\n    for (var propertySymbol in propertySymbols) {\n        if (!propertySymbols.hasOwnProperty(propertySymbol))continue;\n        console.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[Object.getOwnPropertySymbols(obj)] = \", camnter[propertySymbol]);\n    }\n    console.log('');\n})();\n\n/**\n * 5. Reflect.ownKeys(obj)\n *\n * 返回一个数组，包含对象自身的所有属性，不管是属性名是 Symbol 或字符串，也不管是否可枚举\n */\n(function () {\n    var keys = Reflect.ownKeys(camnter);\n    for (var key in keys) {\n        if (!keys.hasOwnProperty(key))continue;\n        console.log(\"[object]\\t\\t[test-\" + 5 + \"]\\t\\t[Reflect.ownKeys(obj)] = \", camnter[keys[key]]);\n    }\n    console.log('');\n})();\n\n/**\n * 以上方法:\n *\n * 首先遍历所有属性名为数值的属性，按照数字排序。\n * 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n * 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n */\n\n/**\n * 数值属性 2 和 10\n * 字符串属性 b 和 a\n * 最后是 Symbol 属性\n */\n(function () {\n    var keys = Reflect.ownKeys({[Symbol()]: 0, b: 0, 10: 0, 2: 0, a: 0});\n    console.log(\"[object]\\t\\t[test-\" + 6 + \"]\\t\\t[Reflect.ownKeys(obj)] = \", keys);\n})();\n"]}