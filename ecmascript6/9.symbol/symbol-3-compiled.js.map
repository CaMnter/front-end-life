{"version":3,"sources":["symbol-3.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;AAMA,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5B,YAAQ,QAAR;AACI,aAAK,sBAAL;AAA8B;AAC1B;AACA;AACJ,aAAK,mBAAL;AAA2B;AACvB;AACA;AACJ,aAAK,yBAAL;AAAiC;AAC7B;AACA;AATR;AAWH;AACD;AACA,aAAa,sBAAb;AACA;AACA,aAAa,mBAAb;AACA;AACA,aAAa,yBAAb;;AAEA;;;AAGA,IAAM,WAAW;AACb,eAAW,sBADE;AAEb,aAAS,mBAFI;AAGb,kBAAc;AAHD,CAAjB;;AAMA,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5B,YAAQ,QAAR;AACI,aAAK,SAAS,SAAd;AACI;AACA;AACJ,aAAK,SAAS,OAAd;AACI;AACA;AACJ,aAAK,SAAS,YAAd;AACI;AACA;AATR;AAWH;AACD,aAAa,SAAS,SAAtB;AACA,aAAa,SAAS,OAAtB;AACA,aAAa,SAAS,YAAtB;;AAEA;;;;;;;AAOA,IAAM,iBAAiB;AACnB,eAAW,OAAO,sBAAP,CADQ;AAEnB,aAAS,OAAO,mBAAP,CAFU;AAGnB,kBAAc,OAAO,yBAAP;AAHK,CAAvB;;AAMA,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5B,YAAQ,QAAR;AACI,aAAK,eAAe,SAApB;AACI;AACA;AACJ,aAAK,eAAe,OAApB;AACI;AACA;AACJ,aAAK,eAAe,YAApB;AACI;AACA;AATR;AAWH;AACD,aAAa,eAAe,SAA5B;AACA,aAAa,eAAe,OAA5B;AACA,aAAa,eAAe,YAA5B","file":"symbol-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***********************\n * 实例：消除魔术字符串 *\n ***********************/\n\n/**\n * 魔术字符串指的是\n * 在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值\n * 风格良好的代码, 应该尽量消除魔术字符串, 该由含义清晰的变量代替\n */\n\nfunction getFragmentA(viewType) {\n    switch (viewType) {\n        case 'view_type_hot_search':  // 魔法字符串\n            // create hot search fragment\n            break;\n        case 'view_type_history':  // 魔法字符串\n            // create history fragment\n            break;\n        case 'view_type_search_result':  // 魔法字符串\n            // create search result fragment\n            break;\n    }\n}\n// 魔法字符串\ngetFragmentA('view_type_hot_search');\n// 魔法字符串\ngetFragmentA('view_type_history');\n// 魔法字符串\ngetFragmentA('view_type_search_result');\n\n/**\n * 正常 消除魔法字符串\n */\nconst ViewType = {\n    hotSearch: 'view_type_hot_search',\n    history: 'view_type_history',\n    searchResult: 'view_type_search_result'\n};\n\nfunction getFragmentB(viewType) {\n    switch (viewType) {\n        case ViewType.hotSearch:\n            // create hot search fragment\n            break;\n        case ViewType.history:\n            // create history fragment\n            break;\n        case ViewType.searchResult:\n            // create search result fragment\n            break;\n    }\n}\ngetFragmentB(ViewType.hotSearch);\ngetFragmentB(ViewType.history);\ngetFragmentB(ViewType.searchResult);\n\n/**\n * 只要确保不会跟其他属性的值冲突即可\n * 很适合改用Symbol值\n *\n * 用 Symbol 消除魔法字符串\n */\n\nconst ViewTypeSymbol = {\n    hotSearch: Symbol('view_type_hot_search'),\n    history: Symbol('view_type_history'),\n    searchResult: Symbol('view_type_search_result')\n};\n\nfunction getFragmentV(viewType) {\n    switch (viewType) {\n        case ViewTypeSymbol.hotSearch:\n            // create hot search fragment\n            break;\n        case ViewTypeSymbol.history:\n            // create history fragment\n            break;\n        case ViewTypeSymbol.searchResult:\n            // create search result fragment\n            break;\n    }\n}\ngetFragmentV(ViewTypeSymbol.hotSearch);\ngetFragmentV(ViewTypeSymbol.history);\ngetFragmentV(ViewTypeSymbol.searchResult);\n\n\n"]}