{"version":3,"sources":["structure-3.js"],"names":[],"mappings":"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","file":"structure-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************\n * ES6 Set 遍历 *\n ****************/\n\n/**\n * Set 结构的实例有四个遍历方法\n * keys()：返回键名\n * values()：返回键值\n * entries()：返回键值对\n * forEach()：使用回调函数遍历每个成员\n *\n * Set 遍历顺序就是插入顺序\n * 这个特性有时非常有用\n *\n * 使用 Set 保存一个回调函数列表\n * 调用时就能保证按照添加顺序调用\n */\n\n/**********************\n * keys value entries *\n **********************/\n\n/**\n * 由于没有 key 所以 keys 返回的和 value 一样\n * 由于没有 key 所以 entries 返回的 key 和 value 是一样的\n */\nlet set = new Set(['CaMnter', 'Save you from anything']);\n(() => {\n    for (let key of set.keys()) {\n        console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[key] = \", key);\n    }\n    console.log('');\n    for (let value of set.values()) {\n        console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[value] = \", value);\n    }\n    console.log('');\n    for (let entry of set.entries()) {\n        console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[entry] = \", entry);\n    }\n    console.log('');\n})();\n\n/**\n * Set 结构的实例默认可遍历\n * 默认遍历器生成函数就是它的 values 方法\n *\n * 所以\n * 在 Set 上 values() 和 for of 是一样的\n */\n(() => {\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[Set.prototype[Symbol.iterator] === Set.prototype.values] = \", Set.prototype[Symbol.iterator] === Set.prototype.values, '\\n');\n    for (let value of set) {\n        console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[value] = \", value);\n    }\n    console.log('');\n})();\n\n\n/***********\n * forEach *\n ***********/\n\n(() => {\n    set.forEach((value, key) => console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[value] = \", value))\n    console.log('');\n})();\n\n\n/*************\n * 遍历的应用 *\n *************/\n\n/**\n * ... 内部也是使用 for...of\n */\n(() => {\n    let array = [...set];\n    console.log(\"[structure]\\t\\t[test-\" + 7 + \"]\\t\\t[array] = \", array, '\\n');\n})();\n\n/**\n * ... + Set 去重\n */\n(() => {\n    let array = [2, 3, 3, 3, 3, 3, 3, 3, 3, 3];\n    let expectArray = [...new Set(array)];\n    console.log(\"[structure]\\t\\t[test-\" + 8 + \"]\\t\\t[expectArray] = \", expectArray, '\\n');\n})();\n\n/**\n * 数组的 map 和 filter\n * 也可以用于 Set\n */\n(() => {\n    var set1 = new Set([1, 2, 3]);\n    set1 = new Set([...set1].map(v => v * v));\n    console.log(\"[structure]\\t\\t[test-\" + 10 + \"]\\t\\t[set1] = \", set1);\n\n    var set2 = new Set([1, 2, 3, 4, 5, 6]);\n    set2 = new Set([...set2].filter(v => (v % 2) == 0));\n    console.log(\"[structure]\\t\\t[test-\" + 10 + \"]\\t\\t[set2] = \", set2, '\\n');\n})();\n\n\n/**\n * 并集（Union）\n * 交集（Intersect）\n * 差集（Difference）\n */\n(() => {\n    let setA = new Set([1, 2, 3, 4]);\n    let setB = new Set([5, 2, 3, 6]);\n\n    let union = new Set([...setA, ...setB]);\n    console.log(\"[structure]\\t\\t[test-\" + 11 + \"]\\t\\t[union] = \", union);\n    let intersect = new Set([...setA].filter(v => setB.has(v)));\n    console.log(\"[structure]\\t\\t[test-\" + 11 + \"]\\t\\t[intersect] = \", intersect);\n    let difference = new Set([...[...setA].filter(v => !setB.has(v)), ...[...setB].filter(v => !setA.has(v))]);\n    console.log(\"[structure]\\t\\t[test-\" + 11 + \"]\\t\\t[difference] = \", difference, '\\n');\n})();\n\n/**\n * 改变 Set 原结构数据\n * 1. 利用原 Set 结构映射出一个新的结构\n * 2. 利用 Array.from 方法\n */\n(() => {\n    // 方法一\n    var setA = new Set([1, 2, 3]);\n    setA = new Set([...setA].map(val => val * 2));\n    console.log(\"[structure]\\t\\t[test-\" + 12 + \"]\\t\\t[setA] = \", setA);\n    var setB = new Set([1, 2, 3]);\n    setB = new Set(Array.from(setB, val => val * 2));\n    console.log(\"[structure]\\t\\t[test-\" + 12 + \"]\\t\\t[setB] = \", setB);\n})();\n"]}