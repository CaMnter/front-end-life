{"version":3,"sources":["structure-4.js"],"names":[],"mappings":"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","file":"structure-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***********\n * WeakSet *\n ***********/\n\n/**\n * WeakSet 只能存对象\n *\n * 内部的对象都是弱引用\n * 如果对象没用被其他对象引用的话，会被垃圾回收机制回收对象占用的内存\n *\n * WeakSet 是不可遍历的\n * 成员都是弱引用\n * 遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了\n */\n(() => {\n    let weakSet = new WeakSet();\n    try {\n        weakSet.add(233);\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[e] = \", e, '\\n');\n    }\n    try {\n        weakSet.add(Symbol());\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 1 + \"]\\t\\t[e] = \", e, '\\n');\n    }\n    console.log('\\n')\n})();\n\n\n/**\n * WeakSet 可以接收一个 数组，但是内容必须是对象\n * 就是 对象数组\n *\n * 可以接收具有 Iterator 接口的对象\n */\n(() => {\n    let array = [22, 33], arrayOfArray = [[2, 3, 3], array];\n    var weakSet = new WeakSet(arrayOfArray);\n    // 然而什么都没有看到\n    console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[weakSet] = \", weakSet);\n    // 但是却有\n    console.log(\"[structure]\\t\\t[test-\" + 2 + \"]\\t\\t[weakSet.has(array)] = \", weakSet.has(array), '\\n');\n\n    try {\n        weakSet = new WeakSet(array);\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 3 + \"]\\t\\t[e] = \", e, '\\n');\n    }\n})();\n\n\n/**\n * WeakSet.prototype.add(value)\n * WeakSet.prototype.delete(value)\n * WeakSet.prototype.has(value)\n */\n(() => {\n    let weakSet = new WeakSet();\n    let o1 = {}, o2 = {};\n\n    weakSet.add(o1);\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[weakSet.has(o1)] = \", weakSet.has(o1));\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[weakSet.has(o2)] = \", weakSet.has(o2));\n    weakSet.delete(o1);\n    console.log(\"[structure]\\t\\t[test-\" + 4 + \"]\\t\\t[weakSet.has(o1)] = \", weakSet.has(o1), '\\n');\n})();\n\n/**\n * 跟 Iterator 相关的\n * 都没有\n * size\n * forEach\n */\n(() => {\n    let weakSet = new WeakSet();\n    weakSet.add({});\n    console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[weakSet.size] = \", weakSet.size);\n    console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[weakSet.forEach] = \", weakSet.forEach);\n    try {\n        weakSet.forEach(v => v.save = 'save');\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 5 + \"]\\t\\t[e] = \", e, '\\n');\n    }\n})();\n\n/**\n * WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏\n */\n(() => {\n    const fruits = new WeakSet()\n    class Fruit {\n        constructor() {\n            fruits.add(this)\n        }\n\n        // 该方法只能在实例上调用\n        method() {\n            if (!fruits.has(this)) {\n                throw new TypeError('Invoke Exception');\n            }\n            console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[Fruit]      [method]\", '\\n');\n        }\n    }\n\n    try {\n        Fruit.prototype.method(); // error\n    } catch (e) {\n        console.log(\"[structure]\\t\\t[test-\" + 6 + \"]\\t\\t[e] = \", e);\n    }\n    let fruit = new Fruit();\n    fruit.method(); // ok\n\n})();"]}