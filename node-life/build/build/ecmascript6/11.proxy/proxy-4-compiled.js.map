{"version":3,"sources":["proxy-4.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;;;AAOA,CAAC,YAAM;AACH,QAAI,iBAAiB,SAAjB,cAAiB,GAAY;AAC7B,eAAO,iBAAP;AACH,KAFD;AAGA,QAAI,QAAQ,IAAI,KAAJ,CAAU,cAAV,EAA0B;AAClC,aADkC,mBAC3B;AACH,mBAAO,wBAAP;AACH;AAHiC,KAA1B,CAAZ;AAKA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,iBAApC,EAAuD,OAAvD,EAAgE,IAAhE;AACH,CAVD;;AAYA;;;AAGA,CAAC,YAAM;AACH,aAAS,GAAT,CAAa,IAAb,EAAmB,KAAnB,EAA0B;AACtB,eAAO,OAAO,KAAd;AACH;;AAED,QAAI,QAAQ,IAAI,KAAJ,CAAU,GAAV,EAAe;AACvB,aADuB,iBACjB,MADiB,EACT,YADS,EACK,aADL,EACmB;AACtC,mBAAO,QAAQ,KAAR,gBAAiB,SAAjB,IAA8B,CAArC;AACH;AAHsB,KAAf,CAAZ;AAKA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,uBAApC,EAA6D,MAAM,EAAN,EAAU,EAAV,CAA7D;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,kCAApC,EAAwE,MAAM,IAAN,CAAW,IAAX,EAAiB,EAAjB,EAAqB,EAArB,CAAxE;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,mCAApC,EAAyE,MAAM,KAAN,CAAY,IAAZ,EAAkB,CAAC,EAAD,EAAK,EAAL,CAAlB,CAAzE;;AAEA;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,4CAApC,EAAkF,QAAQ,KAAR,CAAc,KAAd,EAAqB,IAArB,EAA2B,CAAC,EAAD,EAAK,EAAL,CAA3B,CAAlF;AACH,CAhBD","file":"proxy-4-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/******************************\n * ES6 Proxy 代理 apply 的场景 *\n ******************************/\n\n/**\n * proxy apply 方法可以拦截\n * 方法的 调用、call 和 apply 操作\n */\n\n/**\n * apply 方法有三个参数\n * target               - 目标对象\n * thisArgument         - 目标对象上下文\n * argumentsList        - 目标对象参数数组\n */\n\n(() => {\n    let targetFunction = function () {\n        return 'target function';\n    };\n    let proxy = new Proxy(targetFunction, {\n        apply(){\n            return 'Save you from anything';\n        }\n    });\n    console.log(\"[proxy]  [test-\" + 1 + \"]  [proxy()] = \", proxy(), '\\n');\n})();\n\n/**\n * 实例：执行两次方法\n */\n(() => {\n    function sum(left, right) {\n        return left + right;\n    }\n\n    let proxy = new Proxy(sum, {\n        apply(target, thisArgument, argumentsList){\n            return Reflect.apply(...arguments) * 2;\n        }\n    })\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [proxy(22, 33)] = \", proxy(22, 33));\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [proxy.call(null, 22, 33)] = \", proxy.call(null, 22, 33));\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [proxy.apply(null, 22, 33)] = \", proxy.apply(null, [22, 33]));\n\n    // 调用 Reflect.apply 方法，也会被拦截\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [Reflect.apply(proxy, null, 22, 33)] = \", Reflect.apply(proxy, null, [22, 33]));\n})();"]}