{"version":3,"sources":["proxy-6.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;;AAQA;;;AAGA,CAAC,YAAM;AACH,QAAI,QAAQ,IAAI,KAAJ,CAAU,YAAY,CACjC,CADW,EACT;AACC,iBADD,qBACW,MADX,EACmB,aADnB,EACiC;AAC5B,mBAAO,EAAC,OAAO,cAAc,CAAd,IAAmB,EAA3B,EAAP;AACH;AAHF,KADS,CAAZ;AAMA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,+BAApC,EAAsE,IAAI,KAAJ,CAAU,EAAV,CAAD,CAAgB,KAArF,EAA4F,IAA5F;AACH,CARD;;AAUA;;;;AAIA,CAAC,YAAM;AACH,QAAI,QAAQ,IAAI,KAAJ,CAAU,YAAY,CACjC,CADW,EACT;AACC,iBADD,qBACW,MADX,EACmB,aADnB,EACiC;AAC5B,mBAAO,IAAP;AACH;AAHF,KADS,CAAZ;AAMA,QAAI;AACA,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,+BAApC,EAAsE,IAAI,KAAJ,CAAU,EAAV,CAAD,CAAgB,KAArF,EAA4F,IAA5F;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,WAApC,EAAiD,CAAjD,EAAoD,IAApD;AACH;AACJ,CAZD;;AAeA;;;;AAIA;;;;AAIA;;;AAGA,CAAC,YAAM;AACH,QAAI,SAAS,EAAC,OAAO,MAAR,EAAb;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,sBAD0B,0BACX,MADW,EACH,WADG,EACS;AAC/B,iBAAK,SAAL,CAAe,WAAf,EAA4B,QAA5B;AACA,oBAAQ,cAAR,CAAuB,MAAvB,EAA+B,WAA/B;AACH,SAJyB;AAK1B,iBAL0B,qBAKhB,WALgB,EAKH,MALG,EAKI;AAC1B,gBAAI,YAAY,CAAZ,MAAmB,GAAvB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,yBAAgC,MAAhC,mBAAmD,WAAnD,iBAAN;AACH;AACJ;AATyB,KAAlB,CAAZ;AAWA,QAAI;AACA,eAAO,MAAM,KAAb;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,WAApC,EAAiD,CAAjD,EAAoD,IAApD;AACH;AACJ,CAlBD","file":"proxy-6-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***********************************\n * ES6 Proxy 代理 construct 的场景 *\n **********************************/\n\n/**\n *  construct 方法用于拦截 new\n *\n *  target             - 对象\n *  argumentsList      - 参数\n */\n\n\n/**\n * 实例：数 翻十倍\n */\n(() => {\n    let proxy = new Proxy(function () {\n    }, {\n        construct(target, argumentsList){\n            return {value: argumentsList[0] * 10};\n        }\n    });\n    console.log(\"[proxy]  [test-\" + 1 + \"]  [(new proxy(67)).value] = \", (new proxy(67)).value, '\\n');\n})();\n\n/**\n * construct 必须返回一个对象\n * 否则，会报错\n */\n(() => {\n    let proxy = new Proxy(function () {\n    }, {\n        construct(target, argumentsList){\n            return 2233;\n        }\n    });\n    try {\n        console.log(\"[proxy]  [test-\" + 2 + \"]  [(new proxy(67)).value] = \", (new proxy(67)).value, '\\n');\n    } catch (e) {\n        console.log(\"[proxy]  [test-\" + 2 + \"]  [e] = \", e, '\\n');\n    }\n})();\n\n\n/****************************************\n * ES6 Proxy 代理 deleteProperty 的场景 *\n ***************************************/\n\n/**\n * deleteProperty 方法用于拦截 delete 操作\n */\n\n/**\n * 实例：不允许删除 _xxx 属性\n */\n(() => {\n    let target = {_save: 'save'};\n    let proxy = new Proxy(target, {\n        deleteProperty(target, propertyKey){\n            this.invariant(propertyKey, 'delete');\n            Reflect.deleteProperty(target, propertyKey);\n        },\n        invariant(propertyKey, action){\n            if (propertyKey[0] === '_') {\n                throw new Error(`Invalid attempt to ${action} private \"${propertyKey}\" property`);\n            }\n        }\n    })\n    try {\n        delete proxy._save;\n    } catch (e) {\n        console.log(\"[proxy]  [test-\" + 3 + \"]  [e] = \", e, '\\n');\n    }\n})();"]}