{"version":3,"sources":["proxy-7.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;AAMA,CAAC,YAAM;AACH,QAAI,SAAS,EAAb;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,sBAD0B,0BACX,MADW,EACH,GADG,EACE,UADF,EACc;AACpC,mBAAO,IAAP;AACH;AAHyB,KAAlB,CAAZ;AAKA,UAAM,IAAN,GAAa,MAAb;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,gBAApC,EAAsD,MAAtD;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,eAApC,EAAqD,KAArD,EAA4D,IAA5D;AACH,CAVD;;AAaA;;;;AAIA;;;;;AAKA;;;AAGA,CAAC,YAAM;AACH,QAAI,SAAS,EAAC,OAAO,OAAR,EAAiB,MAAM,MAAvB,EAAb;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,gCAD0B,oCACD,MADC,EACO,WADP,EACmB;AACzC,gBAAI,YAAY,CAAZ,MAAmB,GAAvB,EAA4B;AACxB,uBAAO,SAAP;AACH;AACD,mBAAO,QAAQ,wBAAR,CAAiC,MAAjC,EAAyC,WAAzC,CAAP;AACH;AANyB,KAAlB,CAAZ;AAQA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,wDAApC,EAA8F,OAAO,wBAAP,CAAgC,KAAhC,EAAuC,MAAvC,CAA9F;AACA,YAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,yDAApC,EAA+F,OAAO,wBAAP,CAAgC,KAAhC,EAAuC,OAAvC,CAA/F,EAAgJ,IAAhJ;AACH,CAZD;;AAeA;;;;AAIA;;;;;;;AAOA,CAAC,YAAM;AACH,QAAI,SAAS,EAAb;AACA,QAAI,QAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AAC1B,oBAD0B,wBACb,MADa,EACN;AAChB,oBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,oBAApC;AACA,mBAAO,OAAO,YAAP,CAAoB,MAApB,CAAP;AACH;AAJyB,KAAlB,CAAZ;AAMA,WAAO,YAAP,CAAoB,KAApB;;AAEA;;;;AAIA,YAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB;AACtB,oBADsB,wBACT,MADS,EACF;AAChB,mBAAO,KAAP;AACH;AAHqB,KAAlB,CAAR;AAKA,QAAI;AACA,eAAO,YAAP,CAAoB,KAApB;AACH,KAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAQ,GAAR,CAAY,oBAAoB,CAApB,GAAwB,WAApC,EAAiD,CAAjD;AACH;AACJ,CAxBD","file":"proxy-7-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***************************************\n * ES6 Proxy 代理 defineProperty 的场景 *\n ***************************************/\n\n/**\n * defineProperty 用于拦截 Object.defineProperty 事件\n *\n * 目标对象不可扩展（extensible），则 defineProperty 不能增加目标对象上不存在的属性，否则会报错\n * 目标对象的某个属性不可写（writable）或不可配置（configurable），则 defineProperty 方法不得改变这两个设置\n */\n(() => {\n    let target = {};\n    let proxy = new Proxy(target, {\n        defineProperty(target, key, descriptor) {\n            return true;\n        }\n    });\n    proxy.save = 'save';\n    console.log(\"[proxy]  [test-\" + 1 + \"]  [target] = \", target);\n    console.log(\"[proxy]  [test-\" + 1 + \"]  [proxy] = \", proxy, '\\n');\n})();\n\n\n/**************************************************\n * ES6 Proxy 代理 getOwnPropertyDescriptor 的场景 *\n *************************************************/\n\n/**\n * 拦截 Object.getOwnPropertyDescriptor\n * 返回一个属性描述对象或者 undefined\n */\n\n/**\n * 过滤 _xxx 属性的描述\n */\n(() => {\n    let target = {_save: '_save', save: 'save'};\n    let proxy = new Proxy(target, {\n        getOwnPropertyDescriptor(target, propertyKey){\n            if (propertyKey[0] === '_') {\n                return undefined;\n            }\n            return Reflect.getOwnPropertyDescriptor(target, propertyKey);\n        }\n    });\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [Object.getOwnPropertyDescriptor(proxy, 'save')] = \", Object.getOwnPropertyDescriptor(proxy, 'save'));\n    console.log(\"[proxy]  [test-\" + 2 + \"]  [Object.getOwnPropertyDescriptor(proxy, '_save')] = \", Object.getOwnPropertyDescriptor(proxy, '_save'), '\\n');\n})();\n\n\n/**************************************\n * ES6 Proxy 代理 isExtensible 的场景 *\n **************************************/\n\n/**\n * isExtensible 方法拦截 Object.isExtensible 操作\n *\n * 该方法只能返回布尔值，否则返回值会被自动转为布尔值\n * 这个方法有一个强限制，它的返回值必须与目标对象的 isExtensible 属性保持一致，否则就会抛出错误\n */\n\n(() => {\n    let target = {};\n    var proxy = new Proxy(target, {\n        isExtensible(target){\n            console.log(\"[proxy]  [test-\" + 3 + \"]  [isExtensible] \");\n            return Object.isExtensible(target);\n        }\n    });\n    Object.isExtensible(proxy);\n\n    /*\n     * target isExtensible 默认是 true\n     * 这里返回 false 与之相反会报错\n     */\n    proxy = new Proxy(target, {\n        isExtensible(target){\n            return false;\n        }\n    });\n    try {\n        Object.isExtensible(proxy);\n    } catch (e) {\n        console.log(\"[proxy]  [test-\" + 3 + \"]  [e] = \", e);\n    }\n})();"]}