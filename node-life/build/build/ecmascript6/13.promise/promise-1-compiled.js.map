{"version":3,"sources":["promise-1.js"],"names":[],"mappings":"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","file":"promise-1-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************\n * Promise 基本 *\n ****************/\n\n/**\n * Promise 是异步编程的一种方案，用于替代原本的 \"回调和事件\" 模式\n * Promise 的概念最早由社区提出来的，后来 ES6 统一用户，原生提供了 Promise\n *\n * Promise 是一个对象，可以获取异步操作的消息。各种异步操作可以用同样的方法进行处理\n *\n * 特点：\n *\n * 1. Promise 对象的状态不受外界影响。Promise 代表一个异步操作\n * 有三种状态：Pending：进行中、Resoled：已完成、Rejected：已失败\n *\n * 2. 一旦状态改变，就不会再次变化，何时都能得到结果。\n * 状态变化只有两种可能：\n *      Pending >> Resoled\n *      Pending >> Rejected\n * 一旦变化就一直保持这个结果\n *\n *\n * Promise 可以将异步操作以同步操作的形式表达出来\n * 避免了层层嵌套的回调\n * 统一的接口，使得控制异步操作更容易\n *\n *\n * Promise 的缺点\n *\n * 1. 无法取消 Promise，创建就立即执行，无法中途取消\n * 2. 不设置回调函数的话，Promise 内部抛出错误，也不会反应到外部\n * 3. 处于 Pending 状态时，是无法知道执行到哪一阶段了\n */\n\n/**\n * Promise 的构造方法接收一个 方法\n * 这个方法 有两个参数，这两个参数也是 方法，分别是 resolve 和 reject\n * 是由 JavaScript 引擎提供\n *\n * resolve 方法的作用：将 Promise 对象的状态从 Pending >> Resolved\n *         将异步操作成功的结果，作为参数传递\n * reject  方法的作用：将 Promise 对象的状态从 Pending >> Reject\n *         将异步操作失败的错误，作为参数传递\n */\n(() => {\n    let promiseA = new Promise((resolve, reject) => {\n        // 异步成功\n        resolve(200);\n    });\n    let promiseB = new Promise((resolve, reject) => {\n        // 异步失败\n        reject(400);\n    });\n})();\n\n/**\n * then 方法分别指定 Resolved 状态 Reject 状态\n * 回调函数\n *\n * Reject 回调可有可无\n */\n(() => {\n    let promise = new Promise((resolve, reject) => {\n\n    });\n    promise.then(value => {\n        // success\n    }, error => {\n        // failure\n    });\n\n    // Reject 回调可有可无\n    promise.then(value => {\n\n    });\n})();\n\n/**\n * Promise 创建后会立即执行\n * 简单场景\n */\n(() => {\n    function timeout(duration) {\n        return new Promise((resolve, reject) => {\n            console.log(\"[promise]  [test-\" + 1 + \"]  [then#success]\");\n            setTimeout(resolve, duration, 'save');\n        });\n    };\n    timeout(1000).then(value => {\n        console.log(\"[promise]  [test-\" + 1 + \"]  [then#success] = \", value, '\\n');\n    });\n    console.log(\"[promise]  [test-\" + 1 + \"]  [after timeout]\");\n})();\n\n/**\n * 实例：异步加载图片\n */\n(() => {\n    function loadImageAsync(url) {\n        return new Promise((resolve, reject) => {\n            let image = new Image();\n            image.onload = function () {\n                resolve(image);\n            };\n            image.onerror = function () {\n                reject(new Error('Could not load image at: ' + url));\n            };\n            image.src = url;\n        });\n    };\n})();\n\n/**\n * 实例：Ajax + Promise\n */\n(() => {\n    let getJSON = function (url) {\n        return new Promise((resolve, reject) => {\n            function handler() {\n                if (this.readyState !== 4) {\n                    return;\n                } else if (this.status == 200) {\n                    resolve(this.response);\n                } else {\n                    reject(new Error(this.statusText));\n                }\n            };\n            let client = new XMLHttpRequest();\n            client.open('GET', url);\n            client.onreadystatechange = handler;\n            client.responseType = 'json';\n            client.setRequestHeader('Accept', 'application/json');\n            client.send();\n        });\n    };\n    getJSON(\"https://www.camnter.com\")\n        .then(json => {\n            // success\n        }, error => {\n            // failure\n        });\n})();\n\n/**\n * Promise resolve 的参数可以是 Promise\n * Promise reject 的参数可以是 Promise\n */\n(() => {\n    let errorPromise = new Promise((resolve, reject) => {\n        // Doing something when the error\n    });\n    let successPromise = new Promise((resolve, reject) => {\n        // Doing something when the success\n    });\n    let taskPromise = new Promise((resolve, reject) => {\n        // success\n        resolve(successPromise);\n    });\n    taskPromise.then(successPromise => {\n        // success\n    }, errorPromise => {\n        // failure\n    })\n})();\n\n/**\n * Promise 嵌套例子\n */\n(() => {\n    let promiseA = new Promise((resolve, reject) => {\n        setTimeout(() => reject(new Error('fail')), 2000);\n    });\n    let promiseB = new Promise((resolve, reject) => {\n        // resolve Promise 后，自身的状态无效了\n        setTimeout(() => resolve(promiseA), 1000);\n    });\n    promiseB\n        .then(promise => {\n            // success\n            console.log(\"[promise]  [test-\" + 2 + \"]  [then#success promise] = \", promise);\n        })\n        .catch(error => {\n            console.log(\"[promise]  [test-\" + 2 + \"]  [then#catch error] = \", error);\n        })\n})();\n\n"]}