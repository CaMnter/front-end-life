{"version":3,"sources":["promise-3.js"],"names":[],"mappings":"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","file":"promise-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***************************\n * Promise.prototype.catch *\n ***************************/\n\n/**\n * 实质上：\n * Promise.prototype.catch == .then(null, rejection)\n *\n * 用于指定发生错误时的回调\n */\n(() => {\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 404'));\n    }).then(value => {\n        // success\n    }).then(null, error => {\n        // failure\n        console.log(\"[promise]  [test-\" + 1 + \"]  [promise # then # error] = \", error);\n    })\n\n    // 等同于\n\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 404'));\n    }).then(value => {\n\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 1 + \"]  [promise # catch] = \", error, '\\n');\n    });\n})();\n\n/**\n * reject 等同于 抛出错误\n */\n(() => {\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 404'));\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 2 + \"]  [promise # catch] = \", error);\n    });\n\n    // 等同于\n\n    new Promise((resolve, reject) => {\n        try {\n            throw new Error(new Error('异空间错误 404'));\n        } catch (e) {\n            reject(e);\n        }\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 2 + \"]  [promise # catch] = \", error);\n    });\n})();\n\n\n/**\n * 如果状态 已经为 resolved\n * 再次 抛出错误 是无效的`\n */\n(() => {\n    new Promise((resolve, reject) => {\n        resolve('save');\n        throw new Error('异空间错误 404');\n    }).then(value => {\n        console.log(\"[promise]  [test-\" + 3 + \"]  [promise # then # success] = \", value, '\\n');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 3 + \"]  [promise # catch] = \", error);\n    });\n})();\n\n\n/**\n * Promise 对象的错误具有 \"冒泡\" 性质\n * 全部 then 的错误，都由下个 catch 处理\n * 会一直传递下去\n */\n(() => {\n    new Promise((resolve, reject) => {\n        resolve('save');\n    }).then(value => {\n        // success\n    }).then(value => {\n        // success\n        throw new Error('异空间错误 404');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 4 + \"]  [promise # catch] = \", error, '\\n');\n    });\n})();\n\n/**\n * 一般 then 方法只使用 第一个参数（ 成功回调 ）\n * 第二个参数（ 错误回调 ） 不写\n *\n * 使用 catch 代替\n *\n * 因为：使用 catch 可以捕获之前所有 then 产生的错误\n */\n(() => {\n    // bad\n    new Promise((resolve, reject) => {\n\n    }).then(value => {\n        // success\n    }, error => {\n        // failure\n    });\n\n    // good\n    new Promise((resolve, reject) => {\n\n    }).then(value => {\n\n    }).catch(error => {\n\n    });\n})();\n\n\n/**\n * Promise 体内 和 体外 抛错\n *\n * Promise 体内抛出的话，不 catch ，也不会抛到外部\n */\n(() => {\n    // 体内抛错，不进行 Promise catch\n    new Promise((resolve, reject) => {\n        throw new Error('异空间错误 404');\n    });\n\n    // 体外抛错\n    // 由于 Promise 是立即执行的\n    // 所以，延时 677 后的抛错，Promise 已经执行完了，属于体外抛错\n    new Promise((resolve, reject) => {\n        resolve('save');\n        setTimeout(() => {\n            try {\n                throw new Error('异空间错误 404');\n            } catch (e) {\n                console.log(\"[promise]  [test-\" + 5 + \"]  [try # catch] = \", e, '\\n');\n            }\n        }, 677);\n    });\n})();\n\n\n/**\n * catch 方法执行完后，会返回 Promise 对象\n * 还是可以 继续 then\n */\n(() => {\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 404'));\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 6 + \"]  [promise # catch] = \", error);\n    }).then(() => {\n        console.log(\"[promise]  [test-\" + 6 + \"]  [promise # then]\");\n    });\n})();\n\n/**\n * Promise 是有序的\n */\n(() => {\n    // resolve 会跳过 catch，到 then\n    // then 再次抛错不会回到上一个 catch\n    // 会被下个 catch 捕获\n    new Promise((resolve, reject) => {\n        resolve('save');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 7 + \"]  [promise # first # catch] = \", error);\n    }).then(value => {\n        console.log(\"[promise]  [test-\" + 7 + \"]  [promise # then # value] = \", value);\n        throw new Error('异空间错误 404');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 7 + \"]  [promise # second # catch] = \", error);\n    });\n})();\n\n/**\n * catch 中继续抛错\n */\n(() => {\n    // 400 被 catch 了\n    // 但是 401 后面没有 catch 了\n    // 401 就没被捕获，也不会传递到外部\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 400'));\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 8 + \"]  [promise # first # catch] = \", error,'\\n');\n        throw new Error('异空间错误 401');\n    }).then(() => {\n        console.log(\"[promise]  [test-\" + 8 + \"]  [promise # then]\");\n    });\n\n    // 后面接个 catch 继续捕获 401\n    new Promise((resolve, reject) => {\n        reject(new Error('异空间错误 400'));\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 9 + \"]  [promise # first # catch] = \", error, '\\n');\n        throw new Error('异空间错误 401');\n    }).catch(error => {\n        console.log(\"[promise]  [test-\" + 9 + \"]  [promise # second # catch] = \", error, '\\n');\n    });\n})();"]}