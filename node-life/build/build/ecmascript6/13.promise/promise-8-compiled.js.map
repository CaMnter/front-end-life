{"version":3,"sources":["promise-8.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA;;;;;;;;;AASA;;;AAGA,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAChD,WAAO,KACF,IADE,CACG,OADH,EACY,MADZ,EAEF,KAFE,CAEI,iBAAS;AACZ,mBAAW,YAAM;AACb,kBAAM,KAAN;AACH,SAFD,EAEG,CAFH;AAGH,KANE,CAAP;AAOH,CARD;;AAUA;;;AAGA,CAAC,YAAM;AACH,YACK,OADL,CACa,MADb,EAEK,IAFL,CAEU,iBAAS;AACX,eAAO,QAAQ,oBAAf;AACH,KAJL,EAKK,IALL,CAKU,iBAAS;AACX,cAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH,KAPL,EAQK,IARL;AASH,CAVD;;AAaA;;;;AAIA;;;;;;AAMA;;;;;;;;;AASA;;;AAGA,QAAQ,SAAR,CAAkB,OAAlB,GAA4B,UAAU,QAAV,EAAoB;AAC5C,QAAI,cAAc,KAAK,WAAvB;AACA,WAAO,KAAK,IAAL,CAAU,iBAAS;AACtB;AACA,oBAAY,OAAZ,CAAoB,UAApB,EAAgC,IAAhC,CAAqC;AAAA,mBAAM,KAAN;AAAA,SAArC;AACH,KAHM,EAGJ,iBAAS;AACR;AACA,oBAAY,OAAZ,CAAoB,UAApB,EAAgC,IAAhC,CAAqC,YAAM;AACvC,kBAAM,KAAN;AACH,SAFD;AAGH,KARM,CAAP;AASH,CAXD;;AAcA,CAAC,YAAM;AACH,YACK,OADL,CACa,MADb,EAEK,IAFL,CAEU,iBAAS;AACX,eAAO,QAAQ,oBAAf;AACH,KAJL,EAKK,IALL,CAKU,iBAAS;AACX,cAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH,KAPL,EAQK,IARL,GASK,OATL,CASa,YAAM;AACX,gBAAQ,GAAR,CAAY,sBAAsB,CAAtB,GAA0B,wBAAtC,EAAgE,IAAhE;AACH,KAXL;AAYH,CAbD","file":"promise-8-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***************************\n * Promise 扩展方法 - done *\n **************************/\n\n/**\n * Promise 的结尾 then 或者 catch，如果继续抛出异常的话\n * 是不会被捕获到的\n * 因为 Promise 的异常不会抛出到外部\n *\n * 需要一个方法在回调链的尾端，保证抛出任何可能出现的错误\n * 利用 setTimeout 抛出一个全局错误\n */\n\n/**\n * done 源码\n */\nPromise.prototype.done = function (resolve, reject) {\n    return this\n        .then(resolve, reject)\n        .catch(error => {\n            setTimeout(() => {\n                throw error;\n            }, 0);\n        });\n};\n\n/**\n * done 使用\n */\n(() => {\n    Promise\n        .resolve('Save')\n        .then(value => {\n            return value + \" you from anything\";\n        })\n        .then(value => {\n            throw new Error('[promise]  [test-\" + 1 + \"]  异空间错误 404');\n        })\n        .done();\n})();\n\n\n/******************************\n * Promise 扩展方法 - finally *\n *****************************/\n\n/**\n * 不管是 resolve\n * 还是 reject\n * 都会执行的方法\n */\n\n/**\n * 原理是拿到 Promise\n * 添加一次 then\n * resolve 的 时候 resolve + then\n * reject 的 时候 resolve + then\n *\n * 强行 resolve + then\n */\n\n/**\n * finally 源码\n */\nPromise.prototype.finally = function (callback) {\n    let constructor = this.constructor;\n    return this.then(value => {\n        // success\n        constructor.resolve(callback()).then(() => value);\n    }, error => {\n        // failure\n        constructor.resolve(callback()).then(() => {\n            throw error\n        });\n    })\n};\n\n\n(() => {\n    Promise\n        .resolve('Save')\n        .then(value => {\n            return value + \" you from anything\";\n        })\n        .then(value => {\n            throw new Error('[promise]  [test-\" + 1 + \"]  异空间错误 404');\n        })\n        .done()\n        .finally(() => {\n            console.log(\"[promise]  [test-\" + 2 + \"]  [promise # finally]\", '\\n');\n        });\n})();"]}