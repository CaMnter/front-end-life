{"version":3,"sources":["promise-9.js"],"names":[],"mappings":"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","file":"promise-9-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\nrequire(\"babel-polyfill\");\nlet promiseTry = require(\"es6-promise-try\");\nlet async = require(\"async\");\n\n/****************\n * Promise 应用 *\n ****************/\n\n/**\n * 实例一：加载图片\n */\n\n(() => {\n    const preloadImagePromise = function (path) {\n        return new Promise((resolve, reject) => {\n            let image = new Image();\n            image.onload = resolve;\n            image.error = reject;\n            image.src = path;\n        });\n    };\n})();\n\n/************************\n * Generator 与 Promise *\n ************************/\n\n/**\n * 当 Generator 遇到异步操作的时候，都会返回一个 Promise 对象\n */\n(() => {\n    function getSave() {\n        return Promise.resolve('Save');\n    };\n\n    let generator = function*() {\n        try {\n            let save = yield getSave();\n            console.log(\"[promise]  [test-\" + 1 + \"]  [generator # save] \", save, '\\n');\n        } catch (e) {\n            console.log(\"[promise]  [test-\" + 1 + \"]  [generator # e] \", e);\n        }\n    };\n\n    function run(generator) {\n        let iterator = generator();\n\n        function start(result) {\n            if (result.done)return result.value;\n\n            return result.value.then(value => {\n                // success\n                return start(iterator.next(value))\n            }, error => {\n                // failure\n                return start(iterator.throw(error));\n            })\n        }\n\n        start(iterator.next());\n    };\n    run(generator);\n})();\n\n\n/*****************\n * Promise.try() *\n *****************/\n\n/**\n * 一个 方法 不知道是 异步 还是 同步的\n * 就是想使用 Promise 来处理\n */\n\n/**\n * then 有个弊端\n * 就是会在 本轮事件循环的末尾 执行\n */\n(() => {\n    Promise\n        .resolve('second')\n        .then(value => {\n            console.log(\"[promise]  [test-\" + 2 + \"]  [Promise # then # value] = \", value, '\\n');\n        });\n    // 会在 Promise 之前\n    console.log(\"[promise]  [test-\" + 2 + \"]  [console.log # value] = first\");\n})();\n\n/**\n * 第一种改进办法：async 方法\n *\n * 立即执行 async 函数\n * 因此\n * 如果 方法 是同步的，就会得到同步的结果\n * 如果 方法 是异步的，就可以用 then 指定下一步\n */\n(() => {\n    const callback = (value) => console.log(\"[promise]  [test-\" + 3 + \"]  [callback] = \" + value);\n    async.eachLimit(\n        [callback('first')]\n    );\n    console.log(\"[promise]  [test-\" + 3 + \"]  [console.log] = second\");\n\n    async.eachLimit(\n        [callback('third')]\n    );\n    Promise\n        .resolve('fourth')\n        .then(value => {\n            // success\n            console.log(\"[promise]  [test-\" + 3 + \"]  [promise # then # value] = \" + value);\n        }, error => {\n            // failure\n        });\n})();\n\n/**\n * 第二种方法：函数立即执行块 + new Promise\n */\n(() => {\n    const callback = (value) => console.log(\"[promise]  [test-\" + 4 + \"]  [callback] = \" + value);\n    (() => {\n        new Promise((resolve, reject) => {\n            resolve(callback('first'));\n        }).catch(error => {\n        });\n    })();\n    console.log(\"[promise]  [test-\" + 4 + \"]  [console.log] = second\");\n})();\n\n\n/**\n * 用到 Promise 的时候，Promise 执行中如果抛出异常：\n * 异常是同步异常：还得 try { Promise... }\n * 异常时异步异常：还得 Promise...catch...\n *\n * 为了统一，可以用到 Promise.try\n */\n(() => {\n    const callback = (value) => console.log(\"[promise]  [test-\" + 5 + \"]  [callback] = \" + value);\n    promiseTry(function() {\n        return callback('first');\n    }).then(value => {\n        // success\n    }).catch(error => {\n\n    });\n})();\n\n\n"]}