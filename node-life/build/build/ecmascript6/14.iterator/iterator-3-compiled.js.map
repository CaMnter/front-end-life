{"version":3,"sources":["iterator-3.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AAIA;;;;AAIA;;;;AAIA,CAAC,YAAM;AACH,QAAI,MAAM,IAAI,GAAJ,GAAU,GAAV,CAAc,MAAd,EAAsB,GAAtB,CAA0B,KAA1B,EAAiC,GAAjC,CAAqC,MAArC,EAA6C,GAA7C,CAAiD,UAAjD,CAAV;;AADG,8BAE+B,GAF/B;AAAA,QAEE,IAFF;AAAA,QAEQ,GAFR;AAAA,QAEa,IAFb;AAAA,QAEmB,QAFnB;;AAAA,yBAGsB,GAHtB;AAAA,QAGE,KAHF;AAAA,QAGY,MAHZ;;AAKH,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,IAAvD;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,aAAvC,EAAsD,GAAtD;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,cAAvC,EAAuD,IAAvD;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,kBAAvC,EAA2D,QAA3D;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,eAAvC,EAAwD,KAAxD;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,gBAAvC,EAAyD,MAAzD,EAAiE,IAAjE;AACH,CAXD;;AAaA;;;;;AAKA,CAAC,YAAM;AACH,QAAI,MAAM,KAAV;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,gBAAvC,+BAA6D,GAA7D;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,gBAAvC,GAA0D,MAA1D,4BAAqE,GAArE,IAA2E,IAA3E;AACH,CAJD;;AAOA;;;;AAIA;;;AAGA,CAAC,YAAM;AACH,QAAI,OAAO,MAAX;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,sCAAvC,UAAsF,KAAK,OAAO,QAAZ,CAAtF;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,iCAAvC,EAA0E,KAAK,OAAO,QAAZ,GAA1E;AACA,QAAI,WAAW,KAAK,OAAO,QAAZ,GAAf;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAL,GAAc,CAAlC,EAAqC,GAArC,EAA0C;AACtC,gBAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,yBAAvC,EAAkE,SAAS,IAAT,EAAlE;AACH;AACD,YAAQ,GAAR,CAAY,EAAZ;AACH,CATD;;AAWA;;;AAGA,CAAC,YAAM;AACH;AACA,QAAI,OAAO,IAAI,MAAJ,CAAW,MAAX,CAAX;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,iBAAvC,+BAA8D,IAA9D;AACA,SAAK,OAAO,QAAZ,IAAwB,YAAY;AAChC,YAAI,WAAW;AACX,kBAAM;AADK,SAAf;AAGA,YAAI,UAAU,IAAd;AACA,YAAI,QAAQ,QAAQ,MAApB;;AAEA,iBAAS,IAAT,GAAgB;AACZ,gBAAI,SAAS,CAAb,EAAgB;AACZ,uBAAO;AACH,0BAAM;AADH,iBAAP;AAGH,aAJD,MAIO;AACH,uBAAO;AACH,2BAAO,QAAQ,EAAE,KAAV,CADJ;AAEH,0BAAM;AAFH,iBAAP;AAIH;AACJ;;AAED,eAAO,QAAP;AACH,KArBD;AAsBA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,iBAAvC,+BAA8D,IAA9D,IAAqE,IAArE;AACH,CA3BD","file":"iterator-3-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***************************\n * 调用 Iterator 接口的场合 *\n ***************************/\n\n/**\n * 解构解析\n * 默认调用 Symbol.iterator\n */\n(() => {\n    let set = new Set().add('save').add('you').add('from').add('anything');\n    let [save, you, from, anything] = set;\n    let [first, ...second] = set;\n\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [save] = \", save);\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [you] = \", you);\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [from] = \", from);\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [anything] = \", anything);\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [first] = \", first);\n    console.log(\"[iterator]  [test-\" + 1 + \"]  [second] = \", second, '\\n');\n})();\n\n/**\n * 扩展运算符\n * let array = [...iterator]\n * 默认调用 Symbol.iterator\n */\n(() => {\n    let you = 'you';\n    console.log(\"[iterator]  [test-\" + 2 + \"]  [...you] = \", [...you]);\n    console.log(\"[iterator]  [test-\" + 2 + \"]  [...you] = \", ['Save', ...you], '\\n');\n})();\n\n\n/**************************\n * 字符串的 Iterator 接口 *\n *************************/\n\n/**\n * 字符串是一个类似数组的对象，也原生具有 Iterator 接口\n */\n(() => {\n    let save = 'Save';\n    console.log(\"[iterator]  [test-\" + 3 + \"]  [typeof save[Symbol.iterator]] = \", typeof save[Symbol.iterator]);\n    console.log(\"[iterator]  [test-\" + 3 + \"]  [save[Symbol.iterator]()] = \", save[Symbol.iterator]());\n    let iterator = save[Symbol.iterator]();\n    for (let i = 0; i < save.length + 1; i++) {\n        console.log(\"[iterator]  [test-\" + 3 + \"]  [iterator.next()] = \", iterator.next());\n    }\n    console.log('');\n})();\n\n/**\n * 实现 倒遍历\n */\n(() => {\n    // 不能写 let save = 'Save'\n    let save = new String('Save');\n    console.log(\"[iterator]  [test-\" + 4 + \"]  [...save] = \", [...save]);\n    save[Symbol.iterator] = function () {\n        let iterator = {\n            next: next\n        };\n        let current = this;\n        var index = current.length;\n\n        function next() {\n            if (index <= 0) {\n                return {\n                    done: true\n                }\n            } else {\n                return {\n                    value: current[--index],\n                    done: false\n                }\n            }\n        }\n\n        return iterator;\n    }\n    console.log(\"[iterator]  [test-\" + 4 + \"]  [...save] = \", [...save], '\\n');\n})();\n\n\n"]}