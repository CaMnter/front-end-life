{"version":3,"sources":["numeric-1.js"],"names":[],"mappings":"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","file":"numeric-1-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/***********************\n * 二进制和八进制表示法 *\n ***********************/\n\n/**\n * ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b（或 0B ）和 0o（或 0O ）表示\n */\nconsole.log(\"[numeric]\\t\\t[test-\" + 1 + \"]\\t\\t[(二进制) 0b11111111] = \" + 0b11111111);\nconsole.log(\"[numeric]\\t\\t[test-\" + 1 + \"]\\t\\t[(八进制) 0o111] = \" + 0o111);\nconsole.log(\"\");\n\n/**\n * 从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀 0 表示，ES6 进一步明确，要使用前缀 0o 表示\n */\n// 非严格模式\n(function () {\n    // console.log(\"[numeric]\\t\\t[test-\" + 2 + \"]\\t\\t[(八进制) 011] = \" + 011);\n    console.log(\"[numeric]\\t\\t[test-\" + 2 + \"]\\t\\t[(八进制) 0o11] = \" + 0o11);\n})() // true\nconsole.log(\"\");\n// 严格模式\n(function () {\n    'use strict';\n    // console.log(\"[numeric]\\t\\t[test-\" + 3 + \"]\\t\\t[(八进制) 011] = \" + 011);\n    console.log(\"[numeric]\\t\\t[test-\" + 3 + \"]\\t\\t[(八进制) 0o11] = \" + 0o11);\n})()\nconsole.log(\"\");\n\n/**\n * 要将 0b 和 0o 前缀的字符串数值转为十进制\n */\nconsole.log(\"[numeric]\\t\\t[test-\" + 4 + \"]\\t\\t[Number(\\\"0b11111111\\\").toString(10)] = \" + Number(\"0b11111111\").toString(10));\nconsole.log(\"[numeric]\\t\\t[test-\" + 4 + \"]\\t\\t[Number(\\\"0o111\\\").toString(10)] = \" + Number(\"0o111\").toString(10));\nconsole.log(\"\");\n\n/************************************\n * Number.isFinite() Number.isNaN() *\n ************************************/\n\n/**\n * ES6 在 Number 对象上，新提供了 Number.isFinite() 和 Number.isNaN() 两个方法\n * Number.isFinite() 用来检查一个数值是否为有限的（ finite ）\n */\n\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(267)] = \" + Number.isFinite(267));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(7.77)] = \" + Number.isFinite(7.77));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(NaN)] = \" + Number.isFinite(NaN));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(Infinity)] = \" + Number.isFinite(Infinity));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(-Infinity)] = \" + Number.isFinite(-Infinity));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(\\\"Save\\\")] = \" + Number.isFinite(\"Save\"));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(\\\"267\\\")] = \" + Number.isFinite(\"267\"));\nconsole.log(\"[numeric]\\t\\t[test-\" + 5 + \"]\\t\\t[Number.isFinite(true)] = \" + Number.isFinite(true));\nconsole.log(\"\");\n\n/**\n * ES5 通过下面的代码，部署 Number.isFinite\n */\n\n(function (global) {\n    var global_isFinite = global.isFinite;\n\n    Object.defineProperty(Number, 'isFinite', {\n        value: function isFinite(value) {\n            return typeof value === 'number' && global_isFinite(value);\n        },\n        configurable: true,\n        enumerable: false,\n        writable: true\n    });\n})(this);\n\nisFinite(25) // true\n\n/**\n * Number.isNaN() 用来检查一个值是否为 NaN\n */\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN(NaN)] = \" + Number.isNaN(NaN));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN(267)] = \" + Number.isNaN(267));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN('267')] = \" + Number.isNaN('267'));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN(true)] = \" + Number.isNaN(true));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN(267/NaN)] = \" + Number.isNaN(9 / NaN));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN('true'/0)] = \" + Number.isNaN('true' / 0));\nconsole.log(\"[numeric]\\t\\t[test-\" + 6 + \"]\\t\\t[Number.isNaN('true'/'true')] = \" + Number.isNaN('true' / 'true'));\nconsole.log(\"\");\n\n/**\n * ES5 部署 Number.isNaN()\n */\n\n(function (global) {\n    var global_isNaN = global.isNaN;\n    Object.defineProperty(Number, 'isNaN', {\n        value: function isNaN(value) {\n            return typeof value === 'number' && global_isNaN(value);\n        },\n        configurable: true,\n        enumerable: false,\n        writable: true\n    });\n})(this);\n\n/**\n * 它们与传统的全局方法 isFinite() 和 isNaN() 的区别在于，传统方法先调用 Number() 将非数值的值转为数值，再\n * 进行判断，而这两个新方法只对数值有效，非数值一律返回 false\n */\n\nconsole.log(\"[numeric]\\t\\t[test-\" + 7 + \"]\\t\\t[isFinite(267)] = \" + isFinite(267));\nconsole.log(\"[numeric]\\t\\t[test-\" + 7 + \"]\\t\\t[isNaN(267)] = \" + isNaN(267));\n\n\n\n\n\n\n\n\n"]}