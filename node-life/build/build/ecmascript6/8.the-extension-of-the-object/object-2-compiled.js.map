{"version":3,"sources":["object-2.js"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAIA;;;;AAIA;AACA,IAAI,KAAK,EAAT;AACA,GAAG,IAAH,GAAU,SAAV;AACA;;;;AAIA,IAAI,KAAK,EAAT;AACA,GAAG,OAAO,IAAV,IAAkB,SAAlB;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAGA;AACA,IAAI,KAAK;AACL,QAAM;AADD,CAAT;AAGA;;;AAGA,IAAI,OAAO,MAAX;AACA,IAAI,yBACC,IADD,EACQ,SADR,CAAJ;AAGA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,qCACC,IADD,EACQ,SADR,wBAEA,MAFA,EAEQ,wBAFR,OAAJ;AAIA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mBAA3B,GAAiD,GAAG,IAAhE;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;AAGA,IAAI,yBACC,MAAM,KADP,cACe;AACX,SAAO,wBAAP;AACH,CAHD,CAAJ;AAKA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,qBAA3B,GAAmD,GAAG,IAAH,EAA/D;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA;;;;AAIA,IAAI,OAAO,MAAX;AACA,IAAI,OAAO,MAAX;AACA;AACA,IAAI,yBAAO,IAAP,EAAc,IAAd,CAAJ;;AAGA;;;;AAIA,IAAM,OAAO,EAAC,GAAG,CAAJ,EAAb;AACA,IAAM,OAAO,EAAC,GAAG,CAAJ,EAAb;;AAEA,IAAM,qCACD,IADC,EACM,QADN,wBAED,IAFC,EAEM,QAFN,OAAN;AAIA,QAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,oBAA3B,GAAkD,GAAG,IAAH,CAAlD,GAA6D,mBAA7D,GAAmF,GAAG,IAAH,CAA/F","file":"object-2-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n/****************\n * 属性名表达式 *\n ****************/\n\n/**\n * 主要是方括号 []\n */\n\n// 标识符作为属性名\nvar o1 = {};\no1.name = 'camnter';\n/**\n * ES6\n * 表达式作为属性名，这时要将表达式放在方括号之内\n */\nvar o2 = {};\no2['na' + 'me'] = 'camnter';\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[o1.name] = \" + o1.name);\nconsole.log(\"[object]\\t\\t[test-\" + 1 + \"]\\t\\t[o2.name] = \" + o2.name);\nconsole.log(\"\");\n\n\n// 标识符 定义属性\nvar o3 = {\n    name: \"camnter\"\n};\n/**\n * （表达式）作为对象的属性名\n */\nvar name = 'name';\nvar o4 = {\n    [name]: 'camnter'\n};\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[o3.name] = \" + o3.name);\nconsole.log(\"[object]\\t\\t[test-\" + 2 + \"]\\t\\t[o4.name] = \" + o4.name);\nconsole.log(\"\");\n\nvar o5 = {\n    [name]: 'camnter',\n    'sign': \"Save you from anything\"\n};\nconsole.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[o5.name] = \" + o5.name);\nconsole.log(\"[object]\\t\\t[test-\" + 3 + \"]\\t\\t[o5.sign] = \" + o5.sign);\nconsole.log(\"\");\n\n/**\n * 表达式定义方法名\n */\nlet o6 = {\n    ['s' + 'ave'](){\n        return 'Save you from anything';\n    }\n};\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[o6.save()] = \" + o6.save());\nconsole.log(\"\");\n\n/**\n * 属性名表达式 与 简洁表示法\n * 不能同时使用\n */\nvar att1 = 'att1';\nvar att2 = 'att2';\n// var o7 = {[att1]}; // error\nvar o8 = {[att1]: att1};\n\n\n/**\n * [keyA] 和 [keyB] 得到的都是 [object Object]，所以 [keyB] 会把 [keyA] 覆盖掉\n * 而 o9 最后只有一个 [object Object] 属性\n */\nconst keyA = {a: 1};\nconst keyB = {b: 2};\n\nconst o9 = {\n    [keyA]: 'valueA',\n    [keyB]: 'valueB'\n};\nconsole.log(\"[object]\\t\\t[test-\" + 4 + \"]\\t\\t[o9[keyA]] = \" + o9[keyA] + \"\\t\\t[o9[keyB]] = \" + o9[keyA]);"]}