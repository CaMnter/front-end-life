{"version":3,"sources":["symbol-12.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AAKA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;AAUA,CAAC,YAAM;AACH,QAAI,yBACC,OAAO,WADR,YACqB,IADrB,EAC0B;AACtB,gBAAQ,IAAR;AACI,iBAAK,QAAL;AACI,uBAAO,GAAP;AACJ,iBAAK,QAAL;AACI,uBAAO,WAAP;AACJ,iBAAK,SAAL;AACI,uBAAO,YAAP;AACJ;AACI,sBAAM,IAAI,KAAJ,EAAN;AARR;AAUH,KAZD,CAAJ;AAcA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,uBAAvC,EAAgE,KAAK,EAAL,GAAU,CAA1E;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,sBAAvC,EAA+D,QAAQ,EAAvE;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,8BAAvC,EAAuE,gBAAgB,EAAvF,EAA2F,IAA3F;AACH,CAlBD;;AAqBA;;;;AAIA;;;;;;;;;;;AAWA,CAAC,YAAM;AACH,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,uDAAvC,EAAiG,oBAAE,OAAO,WAAT,EAAuB,MAAvB,EAA+B,QAA/B,EAAjG;;AADG,QAEG,OAFH;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAGM,OAAO,WAHb;AAAA,gCAG4B;AACvB,uBAAO,SAAP;AACH;AALF;;AAAA;AAAA;;AAOH,QAAI,UAAU,IAAI,OAAJ,EAAd;AACA,YAAQ,GAAR,CAAY,uBAAuB,CAAvB,GAA2B,mDAAvC,EAA4F,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,OAA/B,CAA5F;AACH,CATD;;AAYA;;;;AAIA,CAAC,YAAI,CAEJ,CAFD","file":"symbol-12-compiled.js","sourcesContent":["/**\n * Created by：CaMnter\n */\n\n\n/**********************\n * Symbol.toPrimitive *\n **********************/\n\n/**\n * 对象的 Symbol.toPrimitive 属性\n *\n * 对象被转为原始类型的值时\n * 会调用这个方法\n * 返回该对象对应的原始类型值\n */\n\n/**\n * Symbol.toPrimitive 被调用时\n * 会接受一个字符串参数\n *\n * 表示当前运算的模式\n *  Number：该场合需要转成数值\n *  String：该场合需要转成字符串\n *  Default：该场合可以转成数值 也可以转成字符串\n */\n\n(() => {\n    let o1 = {\n        [Symbol.toPrimitive](hint){\n            switch (hint) {\n                case 'number':\n                    return 233;\n                case 'string':\n                    return 'o1-string';\n                case 'default':\n                    return 'o1-default';\n                default:\n                    throw new Error();\n            }\n        }\n    };\n    console.log(\"[symbol]\\t\\t[test-\" + 1 + \"]\\t\\t[10 * o1 + 3] = \", 10 * o1 + 3);\n    console.log(\"[symbol]\\t\\t[test-\" + 1 + \"]\\t\\t['-> ' + o1] = \", '-> ' + o1);\n    console.log(\"[symbol]\\t\\t[test-\" + 1 + \"]\\t\\t['o1-default' == o1] = \", 'o1-default' == o1, '\\n');\n})();\n\n\n/**********************\n * Symbol.toStringTag *\n **********************/\n\n/**\n * 对象的 Symbol.toStringTag 属性\n *\n * 调用 Object.prototype.toString 方法时\n * 如果这个属性存在\n *\n * 它的返回值会出现在 toString 方法返回的字符串之中\n * 表示对象的类型\n *\n * 这个属性可以用来定制 [object Object] 或 [object Array] 中 object 后面的那个字符串\n */\n(() => {\n    console.log(\"[symbol]\\t\\t[test-\" + 2 + \"]\\t\\t[({[Symbol.toStringTag]: 'Save'}.toString())] = \", ({[Symbol.toStringTag]: 'Save'}.toString()));\n    class CaMnter {\n        get [Symbol.toStringTag]() {\n            return 'CaMnter'\n        }\n    }\n    let camnter = new CaMnter();\n    console.log(\"[symbol]\\t\\t[test-\" + 2 + \"]\\t\\t[Object.prototype.toString.call(camnter)] = \", Object.prototype.toString.call(camnter));\n})();\n\n\n/**********************\n * Symbol.unscopables *\n **********************/\n\n(()=>{\n    \n})();"]}